handleProfileImageUpload:
    handler: src/s3/lambda/user/handleProfileImageUpload.handler
    events:
        - s3:
              bucket: ${self:custom.resourceNames.assetsBucket}
              existing: true
              event: s3:ObjectCreated:*
              rules:
                  - prefix: users/
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}

handleExperienceImageUpload:
    handler: src/s3/lambda/experiences/handleExperienceImageUpload.handler
    events:
        - s3:
              bucket: ${self:custom.resourceNames.assetsBucket}
              existing: true
              event: s3:ObjectCreated:*
              rules:
                  - prefix: hosts/
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}

handleCategoryImageUpload:
    handler: src/s3/lambda/categories/handleCategoryImageUpload.handler
    events:
        - s3:
              bucket: ${self:custom.resourceNames.assetsBucket}
              existing: true
              event: s3:ObjectCreated:*
              rules:
                  - prefix: categories/
        - s3:
              bucket: ${self:custom.resourceNames.assetsBucket}
              existing: true
              event: s3:ObjectCreated:*
              rules:
                  - prefix: subcategories/
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}
