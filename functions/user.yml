userGetProfile:
    handler: src/user.getProfile
    timeout: 29
    events:
        - http:
              path: /v1/user/profile
              method: GET
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref LambdaSecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        DB_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        DB_NAME: ${self:custom.resourceNames.postgresDB}
        DB_PORT: ${env:POSTGRES_PORT}
        DB_USER: ${env:POSTGRES_USERNAME}
        DB_PASSWORD: ${env:POSTGRES_PASSWORD}

userUpdateProfile:
    handler: src/user.updateProfile
    timeout: 29
    events:
        - http:
              path: /v1/user/profile
              method: PUT
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref LambdaSecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        DB_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        DB_NAME: ${self:custom.resourceNames.postgresDB}
        DB_PORT: ${env:POSTGRES_PORT}
        DB_USER: ${env:POSTGRES_USERNAME}
        DB_PASSWORD: ${env:POSTGRES_PASSWORD}

userGetProfileImageUploadUrl:
    handler: src/user.getProfileImageUploadUrl
    timeout: 29
    events:
        - http:
              path: /v1/user/profile/image/upload-url
              method: GET
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    environment:
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}
