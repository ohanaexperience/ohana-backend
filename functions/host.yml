getHosts:
    handler: src/host/lambda/public/getHosts.handler
    timeout: 29
    events:
        - http:
              path: /v1/hosts
              method: GET
              cors: true
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}

# Experiences
hostCreateExperience:
    handler: src/experiences/lambda/host/createExperience.handler
    timeout: 29
    events:
        - http:
              path: /v1/host/experiences
              method: POST
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}

hostGetExperiences:
    handler: src/experiences/lambda/host/getExperiences.handler
    timeout: 29
    events:
        - http:
              path: /v1/host/experiences
              method: GET
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}

hostUpdateExperience:
    handler: src/experiences/lambda/host/updateExperience.handler
    timeout: 29
    events:
        - http:
              path: /v1/host/experiences/{experienceId}
              method: PUT
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}

hostDeleteExperience:
    handler: src/experiences/lambda/host/deleteExperience.handler
    timeout: 29
    events:
        - http:
              path: /v1/host/experiences/{experienceId}
              method: DELETE
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}

hostReplaceExperienceImage:
    handler: src/s3/lambda/experiences/replaceExperienceImage.handler
    timeout: 29
    events:
        - http:
              path: /v1/host/experiences/{experienceId}/images/{imageId}/replace
              method: PUT
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}

hostAddExperienceImage:
    handler: src/s3/lambda/experiences/addExperienceImage.handler
    timeout: 29
    events:
        - http:
              path: /v1/host/experiences/{experienceId}/images
              method: POST
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}

hostDeleteExperienceImageById:
    handler: src/s3/lambda/experiences/deleteExperienceImageById.handler
    timeout: 29
    events:
        - http:
              path: /v1/host/experiences/{experienceId}/images/{imageId}
              method: DELETE
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        USE_RDS_PROXY: ${self:custom.useRdsProxy.${self:provider.stage}}
        RDS_CLUSTER_ENDPOINT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Address
        RDS_CLUSTER_PORT: !GetAtt PostgresRDSServerlessCluster.Endpoint.Port
        ASSETS_BUCKET_NAME: ${self:custom.resourceNames.assetsBucket}
