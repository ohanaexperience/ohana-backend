publicGetExperiences:
    handler: src/experiences/lambda/public/getExperiences.handler
    timeout: 29
    # reservedConcurrency: 10
    events:
        - http:
              path: /v1/experiences/public
              method: GET
              cors: true
              #   throttle:
              #       rate: 50
              #       burst: 100
              #   caching:
              #       enabled: true
              #       ttlInSeconds: 300
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        RDS_PROXY_ENDPOINT: !GetAtt PostgresRDSProxy.Endpoint
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        USE_RDS_PROXY: true
        # CACHE_TTL: 300
        # MAX_RESULTS_PER_REQUEST: 50
        # ENABLE_ANALYTICS: true

getExperiences:
    handler: src/experiences/lambda/user/getExperiences.handler
    timeout: 29
    events:
        - http:
              path: /v1/experiences
              method: GET
              cors: true
              authorizer:
                  type: COGNITO_USER_POOLS
                  authorizerId: { Ref: ApiGatewayAuthorizer }
    vpc:
        securityGroupIds:
            - !Ref ProxySecurityGroup
        subnetIds:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
    environment:
        RDS_PROXY_ENDPOINT: !GetAtt PostgresRDSProxy.Endpoint
        POSTGRES_DB: ${self:custom.resourceNames.postgresDB}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        USE_RDS_PROXY: true
