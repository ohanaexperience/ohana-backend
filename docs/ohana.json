{
    "openapi": "3.0.0",
    "info": {
        "title": "Ohana API",
        "description": "API documentation for Ohana backend\n\nBase URL: https://ikfwakanfh.execute-api.us-east-1.amazonaws.com",
        "version": "1.0.0",
        "contact": {
            "email": "support@ohana.com"
        }
    },
    "servers": [
        {
            "url": "https://ikfwakanfh.execute-api.us-east-1.amazonaws.com/dev",
            "description": "Development server"
        }
    ],
    "tags": [
        {
            "name": "Auth",
            "description": "User authentication endpoints"
        },
        {
            "name": "User",
            "description": "User endpoints"
        },
        {
            "name": "Experiences",
            "description": "Experience endpoints"
        },
        {
            "name": "Host",
            "description": "Host endpoints"
        },
        {
            "name": "Reservations",
            "description": "Reservation endpoints"
        }
    ],
    "paths": {
        "/v1/auth/phone/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "Phone Registration",
                "description": "Registers a user with a phone number.",
                "operationId": "userPhoneRegister",
                "requestBody": {
                    "description": "Phone number object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["phoneNumber"],
                                "properties": {
                                    "phoneNumber": {
                                        "type": "string",
                                        "description": "Phone number in E.164 format",
                                        "format": "phone",
                                        "example": "+1234567890"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Verification code successfully sent."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Phone Number": {
                                        "value": {
                                            "error": "MISSING_PHONE_NUMBER",
                                            "message": "Phone number is required."
                                        }
                                    },
                                    "Invalid Phone Number Type": {
                                        "value": {
                                            "error": "INVALID_PHONE_NUMBER_TYPE",
                                            "message": "Phone number must be a string."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/auth/email/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "Email Address Registration",
                "description": "Creates a new user with an email and password. Password must be at least 8 characters long and contain uppercase, lowercase, number, and special characters.",
                "operationId": "authEmailRegister",
                "requestBody": {
                    "description": "Email registration details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["email", "password"],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "Valid email address",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "Password must be at least 8 characters long and contain uppercase, lowercase, number, and special characters.",
                                        "example": "Password123!",
                                        "minLength": 8
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User successfully created."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Email": {
                                        "value": {
                                            "error": "MISSING_EMAIL",
                                            "message": "Email is required."
                                        }
                                    },
                                    "Invalid Email": {
                                        "value": {
                                            "error": "INVALID_EMAIL",
                                            "message": "Invalid email format."
                                        }
                                    },
                                    "Invalid Email Type": {
                                        "value": {
                                            "error": "INVALID_EMAIL_TYPE",
                                            "message": "Email must be a string."
                                        }
                                    },
                                    "Missing Password": {
                                        "value": {
                                            "error": "MISSING_PASSWORD",
                                            "message": "Password is required."
                                        }
                                    },
                                    "Invalid Password Type": {
                                        "value": {
                                            "error": "INVALID_PASSWORD_TYPE",
                                            "message": "Password must be a string."
                                        }
                                    },
                                    "Password Too Short": {
                                        "value": {
                                            "error": "PASSWORD_MIN_LENGTH",
                                            "message": "Password must be at least 8 characters long."
                                        }
                                    },
                                    "Password Missing Uppercase": {
                                        "value": {
                                            "error": "PASSWORD_UPPERCASE",
                                            "message": "Password must contain at least one uppercase letter."
                                        }
                                    },
                                    "Password Missing Lowercase": {
                                        "value": {
                                            "error": "PASSWORD_LOWERCASE",
                                            "message": "Password must contain at least one lowercase letter."
                                        }
                                    },
                                    "Password Missing Number": {
                                        "value": {
                                            "error": "PASSWORD_NUMBER",
                                            "message": "Password must contain at least one number."
                                        }
                                    },
                                    "Password Missing Symbol": {
                                        "value": {
                                            "error": "PASSWORD_SYMBOL",
                                            "message": "Password must contain at least one special character."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/auth/email/resend-code": {
            "post": {
                "tags": ["Auth"],
                "summary": "Resend Email Verification Code",
                "description": "Resends the confirmation code to the user's email address.",
                "operationId": "emailResendCode",
                "requestBody": {
                    "description": "Email details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["email"],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "Valid email address",
                                        "example": "user@example.com"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email verification code sent."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Email": {
                                        "value": {
                                            "error": "MISSING_EMAIL",
                                            "message": "Email is required."
                                        }
                                    },
                                    "Invalid Email": {
                                        "value": {
                                            "error": "INVALID_EMAIL",
                                            "message": "Invalid email format."
                                        }
                                    },
                                    "Invalid Email Type": {
                                        "value": {
                                            "error": "INVALID_EMAIL_TYPE",
                                            "message": "Email must be a string."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/auth/email/confirm-code": {
            "post": {
                "tags": ["Auth"],
                "summary": "Confirm Email Registration",
                "description": "Confirms a user's email registration using the verification code.",
                "operationId": "emailConfirmCode",
                "requestBody": {
                    "description": "Email confirmation details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["email", "confirmationCode"],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "Valid email address",
                                        "example": "user@example.com"
                                    },
                                    "confirmationCode": {
                                        "type": "string",
                                        "description": "6-digit verification code sent to email",
                                        "minLength": 6,
                                        "example": "123456"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Verification code confirmed."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Email": {
                                        "value": {
                                            "error": "MISSING_EMAIL",
                                            "message": "Email is required."
                                        }
                                    },
                                    "Invalid Email": {
                                        "value": {
                                            "error": "INVALID_EMAIL",
                                            "message": "Invalid email format."
                                        }
                                    },
                                    "Invalid Email Type": {
                                        "value": {
                                            "error": "INVALID_EMAIL_TYPE",
                                            "message": "Email must be a string."
                                        }
                                    },
                                    "Missing Confirmation Code": {
                                        "value": {
                                            "error": "MISSING_CONFIRMATION_CODE",
                                            "message": "Confirmation code is required."
                                        }
                                    },
                                    "Invalid Confirmation Code Type": {
                                        "value": {
                                            "error": "INVALID_CONFIRMATION_CODE_TYPE",
                                            "message": "Confirmation code must be a string."
                                        }
                                    },
                                    "Confirmation Code Too Short": {
                                        "value": {
                                            "error": "CONFIRMATION_CODE_MIN_LENGTH",
                                            "message": "Confirmation code must be at least 6 characters long."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/auth/email/forgot-password": {
            "post": {
                "tags": ["Auth"],
                "summary": "Forgot Password",
                "description": "Sends a reset password email to the user's email address.",
                "operationId": "emailForgotPassword",
                "requestBody": {
                    "description": "Email details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["email"],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "Valid email address",
                                        "example": "user@example.com"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email sent with instructions to reset password."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Email": {
                                        "value": {
                                            "error": "MISSING_EMAIL",
                                            "message": "Email is required."
                                        }
                                    },
                                    "Invalid Email": {
                                        "value": {
                                            "error": "INVALID_EMAIL",
                                            "message": "Invalid email format."
                                        }
                                    },
                                    "Invalid Email Type": {
                                        "value": {
                                            "error": "INVALID_EMAIL_TYPE",
                                            "message": "Email must be a string."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/auth/email/change-password": {
            "post": {
                "tags": ["Auth"],
                "summary": "Change Password",
                "description": "Changes a user's password.",
                "operationId": "authChangePassword",
                "requestBody": {
                    "description": "Change password details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "email",
                                    "newPassword",
                                    "confirmationCode"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "Valid email address",
                                        "example": "user@example.com"
                                    },
                                    "newPassword": {
                                        "type": "string",
                                        "description": "New password must be at least 8 characters long and contain uppercase, lowercase, number, and special characters",
                                        "example": "NewPassword123!",
                                        "minLength": 8
                                    },
                                    "confirmationCode": {
                                        "type": "string",
                                        "description": "6-digit verification code sent to email",
                                        "minLength": 6,
                                        "example": "123456"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password successfully changed."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Email": {
                                        "value": {
                                            "error": "MISSING_EMAIL",
                                            "message": "Email is required."
                                        }
                                    },
                                    "Invalid Email": {
                                        "value": {
                                            "error": "INVALID_EMAIL",
                                            "message": "Invalid email format."
                                        }
                                    },
                                    "Invalid Email Type": {
                                        "value": {
                                            "error": "INVALID_EMAIL_TYPE",
                                            "message": "Email must be a string."
                                        }
                                    },
                                    "Missing Password": {
                                        "value": {
                                            "error": "MISSING_PASSWORD",
                                            "message": "Password is required."
                                        }
                                    },
                                    "Invalid Password Type": {
                                        "value": {
                                            "error": "INVALID_PASSWORD_TYPE",
                                            "message": "Password must be a string."
                                        }
                                    },
                                    "Password Too Short": {
                                        "value": {
                                            "error": "PASSWORD_MIN_LENGTH",
                                            "message": "Password must be at least 8 characters long."
                                        }
                                    },
                                    "Password Missing Uppercase": {
                                        "value": {
                                            "error": "PASSWORD_UPPERCASE",
                                            "message": "Password must contain at least one uppercase letter."
                                        }
                                    },
                                    "Password Missing Lowercase": {
                                        "value": {
                                            "error": "PASSWORD_LOWERCASE",
                                            "message": "Password must contain at least one lowercase letter."
                                        }
                                    },
                                    "Password Missing Number": {
                                        "value": {
                                            "error": "PASSWORD_NUMBER",
                                            "message": "Password must contain at least one number."
                                        }
                                    },
                                    "Password Missing Symbol": {
                                        "value": {
                                            "error": "PASSWORD_SYMBOL",
                                            "message": "Password must contain at least one special character."
                                        }
                                    },
                                    "Missing Confirmation Code": {
                                        "value": {
                                            "error": "MISSING_CONFIRMATION_CODE",
                                            "message": "Confirmation code is required."
                                        }
                                    },
                                    "Invalid Confirmation Code Type": {
                                        "value": {
                                            "error": "INVALID_CONFIRMATION_CODE_TYPE",
                                            "message": "Confirmation code must be a string."
                                        }
                                    },
                                    "Confirmation Code Too Short": {
                                        "value": {
                                            "error": "CONFIRMATION_CODE_MIN_LENGTH",
                                            "message": "Confirmation code must be at least 6 characters long."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/auth/email/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "Email Login",
                "description": "Logs in a user with an email and password.",
                "operationId": "authEmailLogin",
                "requestBody": {
                    "description": "Login credentials",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["email", "password"],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "Valid email address",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "User's password",
                                        "example": "Password123!"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "AccessToken": {
                                            "type": "string",
                                            "description": "JWT access token",
                                            "example": "eyJraWQiOiJtTGE5Y0pzQTV4R1N6RHJKNGJBdmcrR3BRY2YwUWNOQTJ5WElUYUNSSUxrPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIyNDg4ODQzOC1jMDgxLTcwMWQtNGQ3Yi1hYWFjNzNhMThmODYiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9CbWR6Ym1iRjMiLCJjbGllbnRfaWQiOiIydGk3NTJndWFyZTdpY2UzcWZxcThvZGg0cyIsIm9yaWdpbl9qdGkiOiIxM2Q4MDA0Ny05ZDcyLTQwOWUtOTA4Ny03MjViYzU1ZDhjYjciLCJldmVudF9pZCI6ImI2ZTQ5ZGFmLWIwZjAtNDVjMS1hZDY1LTM2ZGMyM2FkMWRiYiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3NDUxNjYyMzUsImV4cCI6MTc0NTE2OTgzNSwiaWF0IjoxNzQ1MTY2MjM1LCJqdGkiOiIwYjYxMDVlYS1mYzYxLTRmMzktYWEyZi03NjlhN2YwMjJjYjkiLCJ1c2VybmFtZSI6IjI0ODg4NDM4LWMwODEtNzAxZC00ZDdiLWFhYWM3M2ExOGY4NiJ9.jLcZDQTkq7T3UTMmwaL22HWGeAfttW4StYOwX9dtlk2Vm4VIvPhuvb7HjJjvS_SDsGO19YZF9bG-DA-Pyc2JiUMes7A28I-_L5B_kDt9ucaKYcEJBpwGeFp0svmpFDX8wZ__VdhZZauC8Go-6bbQW49lVehBSwXN8DAS37I9VOAclE2OKnpgFP1zwBMKjGtKjG84pEoZJ9AQ_GOZ3jtJE9jMvTzyNI3-cTAVwY47SbqIKyGQWjtK_LEKahlmmRKKn0CdqnfiRbJV50XElbceq3lCvl1HOzCSFfcbLPtxZ_OPL3hmEETyg5uK7L_OEERzZTxOGarXqSJf2td3oxXC_A"
                                        },
                                        "ExpiresIn": {
                                            "type": "number",
                                            "description": "Token expiration time in seconds",
                                            "example": "3600"
                                        },
                                        "IdToken": {
                                            "type": "string",
                                            "description": "JWT ID token",
                                            "example": "eyJraWQiOiJwbFhDUE9IZ3d6ZVdkYkpLZXg5Z0pcL2JabVwvb2luMndjOUQ2V3hIWlwvbGtZPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIyNDg4ODQzOC1jMDgxLTcwMWQtNGQ3Yi1hYWFjNzNhMThmODYiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfQm1kemJtYkYzIiwiY29nbml0bzp1c2VybmFtZSI6IjI0ODg4NDM4LWMwODEtNzAxZC00ZDdiLWFhYWM3M2ExOGY4NiIsIm9yaWdpbl9qdGkiOiIxM2Q4MDA0Ny05ZDcyLTQwOWUtOTA4Ny03MjViYzU1ZDhjYjciLCJhdWQiOiIydGk3NTJndWFyZTdpY2UzcWZxcThvZGg0cyIsImV2ZW50X2lkIjoiYjZlNDlkYWYtYjBmMC00NWMxLWFkNjUtMzZkYzIzYWQxZGJiIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE3NDUxNjYyMzUsImV4cCI6MTc0NTE2OTgzNSwiaWF0IjoxNzQ1MTY2MjM1LCJqdGkiOiIwZjcxNjJiNC0zYmU3LTRkODgtOTE3My00ZTdmOTdjM2FhYmMiLCJlbWFpbCI6Imh5YW4yODkzQGdtYWlsLmNvbSJ9.bmQ5KOzyUiSpPH1QrZvDtGwk8VnK3HQfbU6eaVJ1_6QOlhi4-xeRCWBCZJIfcK2F18LXhQJ17Hwx-7dnm4HnVDBVyZb80qmVXO-vGX8JauA8ulwsZhyjX09TiqBmTEhip-MqpPq6SRyR5tErpJ6dF1IFg6i18JU1mLqE2XIy3SxZc4RtK5VW7J92y-Sd_8z0qgsXdfkDOEWi96DnQcrR1YXIjWonhj0T8WkcH_p94Bfp_SUxKLhTu-PpLU8W0HLNtgMC-VwtaxcPdNaT84uE8qjho9aXxu08GNgquqElTqkZi1Ru9njCkixPpYq4tt5mud-Qr1CHu9qLx5UG2zGeVg"
                                        },
                                        "RefreshToken": {
                                            "type": "string",
                                            "description": "JWT refresh token",
                                            "example": "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.c7_A1VYdJPxjjpiU6_a7kTWCYZjXpeYzV1HdH3GcPok524dKEK_7IXDkujqQxPEhGiEmW3MuReskJhJy9Jv8xS4jI01QD4RSBcQYid1RqfTO0zYGsN0mrJfkkW9qbtgk7hNw4YJDVCrsBBY2Q2q9PTQkZojwkXEhVvkA4H1JU9XEx1Z6rKljHVfIvUyl93Be0qA7cDHsRgAOnde9BeMX_1bxJmVmgX_1I0AwGH5hrKf3L1wAY2qQR5aXw6NfeHOz63YJxfv9B5gRW57GfgncRkYbo7zs4PdTTug9FmciUcOR73bg5__aYC--RpQtTjP9cnUPWaZKhangYmnDv45AfA.YMKu7gsb08Lg47pI.53cIDAtFzHVfIk-U9-0VrKRYqHKjA287noa7fnMJdh7I9KpV5JDNHxRPDbFPvdyuRYdcjKEOsxM9R0ebX0PbwL7NcCyd0WbDBn8EysvEWvtj8FweJ-z3OiQSZkwydWxV3RAWe4q-D1U7aZLJwOsqAP3rgjMXH0ThysiBfjBt54euGNsd1x2bMDBy66qYFYAR1MpqCCdVL468kGUi9grLOedwynsrdEFZkggWQ7ZLbjL1jQpg8AkdnjFSX5lLrL4eMYyAP2ZVkFOnfC4g59QJocsEvdhV0PFKxgePW8IPPar9R8kmCFzeRHYmm7nih7d__tgVBI8zfqjxskUwmMNqdArC4GLBqmMXDFUw_GjTgAs8RyaWDUPyVEI5ezy-J1p0Nq4TVFs6Ac_AYgv3muarpnfA6ZMPxiHWGFzTjYeqAS6EvhgzMW8_99bJ_uDgsHnomA9IF4VOW1yIXxsVoMb__QK5Db02bLueMCMkau33ugSF8JS9pnI41tkBWhuiXSEWEui4G3WMJ8_yM_JNWyGbDVFXBsGeC6J8J0U7SLmjNOmfD2zEbx-UWBc5JLs1nGSkHV3UMHarGgOIlFVHGunnakCPyRo9RJmpsAhxuywALUveHJPSrwpJx-QJ6dcs5DYWb19HyvEZc5kJbAb0PeImVJ5hnMNzZY9xO5eOIDAh7sznZr_ORuKuFdj2Tk1IhfxueHre8-L7Ntap8MTW8rw6kbcuQ1EHac4-2phqZftLuHrvBQXlqHf-n_WW8OqGlwWzYQahLKw6tNT3qbYhHOyGCxVuUME5ABxlK5qUwt1uOsQ250McRYskfSVneeztZYvTFBcBfcfVciQ41FKVcCKswDuGl1-n60Dp7wAL_vHqXf2j93GH5KUocttrpMgqOF4QyujnnEZBZt6uT9IHCBFGXezGX-UcnPM_LLMY7m0cwHqHClCJgg9D13pwwRukjtlCrBm9jZAA7VTibBxatwlC8awaNG978JILk9CrIj72q6wFVxogWO1jv2-pOyNrgf_ZVhdaFEYIlVeIu6XyJ04KIfvbTMIoqTd6hnd5XgzlVDWpfeDzslbcRlFHEogIvLCpKyDhymfHsnpImTbYGkM6zVbRPcoVqppcx6XxSlBkOoZjuvobR1y9D4iok77bZD28UngixD0eIhTE1_nKDdS12qFYhsRMHPJevtRXFj59G9sCQZDtBg0ev2v9wEMBh_LGXwm87nwGdhAulZ7mdaGcpjqo69tGM0lAtz4LJeViGjQwGRHszmXFQ3VsHyS17kZk-6vAfyXeHe_xs4QDjjPXTd9rHYW0quMMfupfqnIG35D0nTBRNAp2lzvUxw.FMMP5l6-X1lE_zTB8M_55A"
                                        },
                                        "TokenType": {
                                            "type": "string",
                                            "description": "Type of token",
                                            "example": "Bearer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Email": {
                                        "value": {
                                            "error": "MISSING_EMAIL",
                                            "message": "Email is required."
                                        }
                                    },
                                    "Invalid Email": {
                                        "value": {
                                            "error": "INVALID_EMAIL",
                                            "message": "Invalid email format."
                                        }
                                    },
                                    "Invalid Email Type": {
                                        "value": {
                                            "error": "INVALID_EMAIL_TYPE",
                                            "message": "Email must be a string."
                                        }
                                    },
                                    "Missing Password": {
                                        "value": {
                                            "error": "MISSING_PASSWORD",
                                            "message": "Password is required."
                                        }
                                    },
                                    "Invalid Password Type": {
                                        "value": {
                                            "error": "INVALID_PASSWORD_TYPE",
                                            "message": "Password must be a string."
                                        }
                                    },
                                    "Password Too Short": {
                                        "value": {
                                            "error": "PASSWORD_MIN_LENGTH",
                                            "message": "Password must be at least 8 characters long."
                                        }
                                    },
                                    "Password Missing Uppercase": {
                                        "value": {
                                            "error": "PASSWORD_UPPERCASE",
                                            "message": "Password must contain at least one uppercase letter."
                                        }
                                    },
                                    "Password Missing Lowercase": {
                                        "value": {
                                            "error": "PASSWORD_LOWERCASE",
                                            "message": "Password must contain at least one lowercase letter."
                                        }
                                    },
                                    "Password Missing Number": {
                                        "value": {
                                            "error": "PASSWORD_NUMBER",
                                            "message": "Password must contain at least one number."
                                        }
                                    },
                                    "Password Missing Symbol": {
                                        "value": {
                                            "error": "PASSWORD_SYMBOL",
                                            "message": "Password must contain at least one special character."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/auth/tokens/refresh": {
            "post": {
                "tags": ["Auth"],
                "summary": "Refresh Tokens",
                "description": "Refreshes a user's tokens.",
                "operationId": "authRefreshTokens",
                "requestBody": {
                    "description": "Refresh token details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["refreshToken"],
                                "properties": {
                                    "refreshToken": {
                                        "type": "string",
                                        "format": "jwt",
                                        "description": "JWT refresh token",
                                        "example": "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.c7_A1VYdJPxjjpiU6_a7kTWCYZjXpeYzV1HdH3GcPok524dKEK_7IXDkujqQxPEhGiEmW3MuReskJhJy9Jv8xS4jI01QD4RSBcQYid1RqfTO0zYGsN0mrJfkkW9qbtgk7hNw4YJDVCrsBBY2Q2q9PTQkZojwkXEhVvkA4H1JU9XEx1Z6rKljHVfIvUyl93Be0qA7cDHsRgAOnde9BeMX_1bxJmVmgX_1I0AwGH5hrKf3L1wAY2qQR5aXw6NfeHOz63YJxfv9B5gRW57GfgncRkYbo7zs4PdTTug9FmciUcOR73bg5__aYC--RpQtTjP9cnUPWaZKhangYmnDv45AfA.YMKu7gsb08Lg47pI.53cIDAtFzHVfIk-U9-0VrKRYqHKjA287noa7fnMJdh7I9KpV5JDNHxRPDbFPvdyuRYdcjKEOsxM9R0ebX0PbwL7NcCyd0WbDBn8EysvEWvtj8FweJ-z3OiQSZkwydWxV3RAWe4q-D1U7aZLJwOsqAP3rgjMXH0ThysiBfjBt54euGNsd1x2bMDBy66qYFYAR1MpqCCdVL468kGUi9grLOedwynsrdEFZkggWQ7ZLbjL1jQpg8AkdnjFSX5lLrL4eMYyAP2ZVkFOnfC4g59QJocsEvdhV0PFKxgePW8IPPar9R8kmCFzeRHYmm7nih7d__tgVBI8zfqjxskUwmMNqdArC4GLBqmMXDFUw_GjTgAs8RyaWDUPyVEI5ezy-J1p0Nq4TVFs6Ac_AYgv3muarpnfA6ZMPxiHWGFzTjYeqAS6EvhgzMW8_99bJ_uDgsHnomA9IF4VOW1yIXxsVoMb__QK5Db02bLueMCMkau33ugSF8JS9pnI41tkBWhuiXSEWEui4G3WMJ8_yM_JNWyGbDVFXBsGeC6J8J0U7SLmjNOmfD2zEbx-UWBc5JLs1nGSkHV3UMHarGgOIlFVHGunnakCPyRo9RJmpsAhxuywALUveHJPSrwpJx-QJ6dcs5DYWb19HyvEZc5kJbAb0PeImVJ5hnMNzZY9xO5eOIDAh7sznZr_ORuKuFdj2Tk1IhfxueHre8-L7Ntap8MTW8rw6kbcuQ1EHac4-2phqZftLuHrvBQXlqHf-n_WW8OqGlwWzYQahLKw6tNT3qbYhHOyGCxVuUME5ABxlK5qUwt1uOsQ250McRYskfSVneeztZYvTFBcBfcfVciQ41FKVcCKswDuGl1-n60Dp7wAL_vHqXf2j93GH5KUocttrpMgqOF4QyujnnEZBZt6uT9IHCBFGXezGX-UcnPM_LLMY7m0cwHqHClCJgg9D13pwwRukjtlCrBm9jZAA7VTibBxatwlC8awaNG978JILk9CrIj72q6wFVxogWO1jv2-pOyNrgf_ZVhdaFEYIlVeIu6XyJ04KIfvbTMIoqTd6hnd5XgzlVDWpfeDzslbcRlFHEogIvLCpKyDhymfHsnpImTbYGkM6zVbRPcoVqppcx6XxSlBkOoZjuvobR1y9D4iok77bZD28UngixD0eIhTE1_nKDdS12qFYhsRMHPJevtRXFj59G9sCQZDtBg0ev2v9wEMBh_LGXwm87nwGdhAulZ7mdaGcpjqo69tGM0lAtz4LJeViGjQwGRHszmXFQ3VsHyS17kZk-6vAfyXeHe_xs4QDjjPXTd9rHYW0quMMfupfqnIG35D0nTBRNAp2lzvUxw.FMMP5l6-X1lE_zTB8M_55A"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "AccessToken": {
                                            "type": "string",
                                            "description": "JWT access token",
                                            "example": "eyJraWQiOiJtTGE5Y0pzQTV4R1N6RHJKNGJBdmcrR3BRY2YwUWNOQTJ5WElUYUNSSUxrPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIyNDg4ODQzOC1jMDgxLTcwMWQtNGQ3Yi1hYWFjNzNhMThmODYiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9CbWR6Ym1iRjMiLCJjbGllbnRfaWQiOiIydGk3NTJndWFyZTdpY2UzcWZxcThvZGg0cyIsIm9yaWdpbl9qdGkiOiIxM2Q4MDA0Ny05ZDcyLTQwOWUtOTA4Ny03MjViYzU1ZDhjYjciLCJldmVudF9pZCI6ImI2ZTQ5ZGFmLWIwZjAtNDVjMS1hZDY1LTM2ZGMyM2FkMWRiYiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3NDUxNjYyMzUsImV4cCI6MTc0NTE2OTgzNSwiaWF0IjoxNzQ1MTY2MjM1LCJqdGkiOiIwYjYxMDVlYS1mYzYxLTRmMzktYWEyZi03NjlhN2YwMjJjYjkiLCJ1c2VybmFtZSI6IjI0ODg4NDM4LWMwODEtNzAxZC00ZDdiLWFhYWM3M2ExOGY4NiJ9.jLcZDQTkq7T3UTMmwaL22HWGeAfttW4StYOwX9dtlk2Vm4VIvPhuvb7HjJjvS_SDsGO19YZF9bG-DA-Pyc2JiUMes7A28I-_L5B_kDt9ucaKYcEJBpwGeFp0svmpFDX8wZ__VdhZZauC8Go-6bbQW49lVehBSwXN8DAS37I9VOAclE2OKnpgFP1zwBMKjGtKjG84pEoZJ9AQ_GOZ3jtJE9jMvTzyNI3-cTAVwY47SbqIKyGQWjtK_LEKahlmmRKKn0CdqnfiRbJV50XElbceq3lCvl1HOzCSFfcbLPtxZ_OPL3hmEETyg5uK7L_OEERzZTxOGarXqSJf2td3oxXC_A"
                                        },
                                        "ExpiresIn": {
                                            "type": "number",
                                            "description": "Token expiration time in seconds",
                                            "example": "3600"
                                        },
                                        "IdToken": {
                                            "type": "string",
                                            "description": "JWT ID token",
                                            "example": "eyJraWQiOiJwbFhDUE9IZ3d6ZVdkYkpLZXg5Z0pcL2JabVwvb2luMndjOUQ2V3hIWlwvbGtZPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIyNDg4ODQzOC1jMDgxLTcwMWQtNGQ3Yi1hYWFjNzNhMThmODYiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfQm1kemJtYkYzIiwiY29nbml0bzp1c2VybmFtZSI6IjI0ODg4NDM4LWMwODEtNzAxZC00ZDdiLWFhYWM3M2ExOGY4NiIsIm9yaWdpbl9qdGkiOiIxM2Q4MDA0Ny05ZDcyLTQwOWUtOTA4Ny03MjViYzU1ZDhjYjciLCJhdWQiOiIydGk3NTJndWFyZTdpY2UzcWZxcThvZGg0cyIsImV2ZW50X2lkIjoiYjZlNDlkYWYtYjBmMC00NWMxLWFkNjUtMzZkYzIzYWQxZGJiIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE3NDUxNjYyMzUsImV4cCI6MTc0NTE2OTgzNSwiaWF0IjoxNzQ1MTY2MjM1LCJqdGkiOiIwZjcxNjJiNC0zYmU3LTRkODgtOTE3My00ZTdmOTdjM2FhYmMiLCJlbWFpbCI6Imh5YW4yODkzQGdtYWlsLmNvbSJ9.bmQ5KOzyUiSpPH1QrZvDtGwk8VnK3HQfbU6eaVJ1_6QOlhi4-xeRCWBCZJIfcK2F18LXhQJ17Hwx-7dnm4HnVDBVyZb80qmVXO-vGX8JauA8ulwsZhyjX09TiqBmTEhip-MqpPq6SRyR5tErpJ6dF1IFg6i18JU1mLqE2XIy3SxZc4RtK5VW7J92y-Sd_8z0qgsXdfkDOEWi96DnQcrR1YXIjWonhj0T8WkcH_p94Bfp_SUxKLhTu-PpLU8W0HLNtgMC-VwtaxcPdNaT84uE8qjho9aXxu08GNgquqElTqkZi1Ru9njCkixPpYq4tt5mud-Qr1CHu9qLx5UG2zGeVg"
                                        },
                                        "RefreshToken": {
                                            "type": "string",
                                            "description": "JWT refresh token",
                                            "example": "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.c7_A1VYdJPxjjpiU6_a7kTWCYZjXpeYzV1HdH3GcPok524dKEK_7IXDkujqQxPEhGiEmW3MuReskJhJy9Jv8xS4jI01QD4RSBcQYid1RqfTO0zYGsN0mrJfkkW9qbtgk7hNw4YJDVCrsBBY2Q2q9PTQkZojwkXEhVvkA4H1JU9XEx1Z6rKljHVfIvUyl93Be0qA7cDHsRgAOnde9BeMX_1bxJmVmgX_1I0AwGH5hrKf3L1wAY2qQR5aXw6NfeHOz63YJxfv9B5gRW57GfgncRkYbo7zs4PdTTug9FmciUcOR73bg5__aYC--RpQtTjP9cnUPWaZKhangYmnDv45AfA.YMKu7gsb08Lg47pI.53cIDAtFzHVfIk-U9-0VrKRYqHKjA287noa7fnMJdh7I9KpV5JDNHxRPDbFPvdyuRYdcjKEOsxM9R0ebX0PbwL7NcCyd0WbDBn8EysvEWvtj8FweJ-z3OiQSZkwydWxV3RAWe4q-D1U7aZLJwOsqAP3rgjMXH0ThysiBfjBt54euGNsd1x2bMDBy66qYFYAR1MpqCCdVL468kGUi9grLOedwynsrdEFZkggWQ7ZLbjL1jQpg8AkdnjFSX5lLrL4eMYyAP2ZVkFOnfC4g59QJocsEvdhV0PFKxgePW8IPPar9R8kmCFzeRHYmm7nih7d__tgVBI8zfqjxskUwmMNqdArC4GLBqmMXDFUw_GjTgAs8RyaWDUPyVEI5ezy-J1p0Nq4TVFs6Ac_AYgv3muarpnfA6ZMPxiHWGFzTjYeqAS6EvhgzMW8_99bJ_uDgsHnomA9IF4VOW1yIXxsVoMb__QK5Db02bLueMCMkau33ugSF8JS9pnI41tkBWhuiXSEWEui4G3WMJ8_yM_JNWyGbDVFXBsGeC6J8J0U7SLmjNOmfD2zEbx-UWBc5JLs1nGSkHV3UMHarGgOIlFVHGunnakCPyRo9RJmpsAhxuywALUveHJPSrwpJx-QJ6dcs5DYWb19HyvEZc5kJbAb0PeImVJ5hnMNzZY9xO5eOIDAh7sznZr_ORuKuFdj2Tk1IhfxueHre8-L7Ntap8MTW8rw6kbcuQ1EHac4-2phqZftLuHrvBQXlqHf-n_WW8OqGlwWzYQahLKw6tNT3qbYhHOyGCxVuUME5ABxlK5qUwt1uOsQ250McRYskfSVneeztZYvTFBcBfcfVciQ41FKVcCKswDuGl1-n60Dp7wAL_vHqXf2j93GH5KUocttrpMgqOF4QyujnnEZBZt6uT9IHCBFGXezGX-UcnPM_LLMY7m0cwHqHClCJgg9D13pwwRukjtlCrBm9jZAA7VTibBxatwlC8awaNG978JILk9CrIj72q6wFVxogWO1jv2-pOyNrgf_ZVhdaFEYIlVeIu6XyJ04KIfvbTMIoqTd6hnd5XgzlVDWpfeDzslbcRlFHEogIvLCpKyDhymfHsnpImTbYGkM6zVbRPcoVqppcx6XxSlBkOoZjuvobR1y9D4iok77bZD28UngixD0eIhTE1_nKDdS12qFYhsRMHPJevtRXFj59G9sCQZDtBg0ev2v9wEMBh_LGXwm87nwGdhAulZ7mdaGcpjqo69tGM0lAtz4LJeViGjQwGRHszmXFQ3VsHyS17kZk-6vAfyXeHe_xs4QDjjPXTd9rHYW0quMMfupfqnIG35D0nTBRNAp2lzvUxw.FMMP5l6-X1lE_zTB8M_55A"
                                        },
                                        "TokenType": {
                                            "type": "string",
                                            "description": "Type of token",
                                            "example": "Bearer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Refresh Token": {
                                        "value": {
                                            "error": "MISSING_REFRESH_TOKEN",
                                            "message": "Refresh token is required."
                                        }
                                    },
                                    "Invalid Refresh Token Type": {
                                        "value": {
                                            "error": "INVALID_REFRESH_TOKEN_TYPE",
                                            "message": "Refresh token must be a string."
                                        }
                                    },
                                    "Invalid Refresh Token": {
                                        "value": {
                                            "error": "INVALID_REFRESH_TOKEN",
                                            "message": "Invalid refresh token."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/auth/google/sign-in": {
            "post": {
                "tags": ["Auth"],
                "summary": "Google Sign In",
                "description": "Signs in a user using Google Id Token.",
                "operationId": "googleSignIn",
                "requestBody": {
                    "description": "Google token details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["idToken"],
                                "properties": {
                                    "idToken": {
                                        "type": "string",
                                        "format": "jwt",
                                        "description": "Google Id Token",
                                        "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImMzN2RhNzVjOWZiZTE4YzJjZTkxMjViOWFhMWYzMDBkY2IzMWU4ZDkiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiIxMDY2MjMyNjQ2MTU0LTZsMnVqZ3Qxdmo2NW9udWt1NWZvcjRlYzhwaTVubzZ1LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiMTA2NjIzMjY0NjE1NC02bDJ1amd0MXZqNjVvbnVrdTVmb3I0ZWM4cGk1bm82dS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwODQ0OTU2MzYwNzcyMDgzMzU4MSIsImVtYWlsIjoiaHlhbjI4OTNAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiJGMGQyZEpoemtTRVNBRnBiMmxnVlFRIiwibmFtZSI6IkhhbmsgWWFuIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FDZzhvY0xZU3l1YU52aGI4SVJQRHJiaFJRS3hQSE5LU0NZM3ZPcDFZaV9hY05QRjNoUEFLUT1zOTYtYyIsImdpdmVuX25hbWUiOiJIYW5rIiwiZmFtaWx5X25hbWUiOiJZYW4iLCJpYXQiOjE3NDQ5MDc3MzYsImV4cCI6MTc0NDkxMTMzNn0.WeKiBnKKJqYTiaIQ2bLL-a49uWVQbuGJWqYQ31pJjvP-VfI0VD-IV4dIurSi-jYKLc4-G9A59FMCY9V4S4EFZ0PERno8SZSdJMEJdoA2tGsqqFbIzhi0wSJedaQMSdkr0kbUqejvWaWDggBsMZuOzTczd4Q-UR6PfZlPfNYmlF-RqMerEhbbOEZiIaZiGDPUXQnb5V7m6zYkcGU9_tWN8iMDR7qR0Ajc5OBoRONSYICgceXuU-ABGxCCKGKxjc8lFOPWTB0GUaqQSJYykLebK8n3nUGxOdmTBKTNitxgq8VCX6nQsPfRJUUZmwy36EGlEm6LryFyfNoqA8hged8YNQ"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "AccessToken": {
                                            "type": "string",
                                            "description": "JWT access token",
                                            "example": "eyJraWQiOiJtTGE5Y0pzQTV4R1N6RHJKNGJBdmcrR3BRY2YwUWNOQTJ5WElUYUNSSUxrPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIyNDg4ODQzOC1jMDgxLTcwMWQtNGQ3Yi1hYWFjNzNhMThmODYiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9CbWR6Ym1iRjMiLCJjbGllbnRfaWQiOiIydGk3NTJndWFyZTdpY2UzcWZxcThvZGg0cyIsIm9yaWdpbl9qdGkiOiIxM2Q4MDA0Ny05ZDcyLTQwOWUtOTA4Ny03MjViYzU1ZDhjYjciLCJldmVudF9pZCI6ImI2ZTQ5ZGFmLWIwZjAtNDVjMS1hZDY1LTM2ZGMyM2FkMWRiYiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3NDUxNjYyMzUsImV4cCI6MTc0NTE2OTgzNSwiaWF0IjoxNzQ1MTY2MjM1LCJqdGkiOiIwYjYxMDVlYS1mYzYxLTRmMzktYWEyZi03NjlhN2YwMjJjYjkiLCJ1c2VybmFtZSI6IjI0ODg4NDM4LWMwODEtNzAxZC00ZDdiLWFhYWM3M2ExOGY4NiJ9.jLcZDQTkq7T3UTMmwaL22HWGeAfttW4StYOwX9dtlk2Vm4VIvPhuvb7HjJjvS_SDsGO19YZF9bG-DA-Pyc2JiUMes7A28I-_L5B_kDt9ucaKYcEJBpwGeFp0svmpFDX8wZ__VdhZZauC8Go-6bbQW49lVehBSwXN8DAS37I9VOAclE2OKnpgFP1zwBMKjGtKjG84pEoZJ9AQ_GOZ3jtJE9jMvTzyNI3-cTAVwY47SbqIKyGQWjtK_LEKahlmmRKKn0CdqnfiRbJV50XElbceq3lCvl1HOzCSFfcbLPtxZ_OPL3hmEETyg5uK7L_OEERzZTxOGarXqSJf2td3oxXC_A"
                                        },
                                        "ExpiresIn": {
                                            "type": "number",
                                            "description": "Token expiration time in seconds",
                                            "example": "3600"
                                        },
                                        "IdToken": {
                                            "type": "string",
                                            "description": "JWT ID token",
                                            "example": "eyJraWQiOiJwbFhDUE9IZ3d6ZVdkYkpLZXg5Z0pcL2JabVwvb2luMndjOUQ2V3hIWlwvbGtZPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIyNDg4ODQzOC1jMDgxLTcwMWQtNGQ3Yi1hYWFjNzNhMThmODYiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfQm1kemJtYkYzIiwiY29nbml0bzp1c2VybmFtZSI6IjI0ODg4NDM4LWMwODEtNzAxZC00ZDdiLWFhYWM3M2ExOGY4NiIsIm9yaWdpbl9qdGkiOiIxM2Q4MDA0Ny05ZDcyLTQwOWUtOTA4Ny03MjViYzU1ZDhjYjciLCJhdWQiOiIydGk3NTJndWFyZTdpY2UzcWZxcThvZGg0cyIsImV2ZW50X2lkIjoiYjZlNDlkYWYtYjBmMC00NWMxLWFkNjUtMzZkYzIzYWQxZGJiIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE3NDUxNjYyMzUsImV4cCI6MTc0NTE2OTgzNSwiaWF0IjoxNzQ1MTY2MjM1LCJqdGkiOiIwZjcxNjJiNC0zYmU3LTRkODgtOTE3My00ZTdmOTdjM2FhYmMiLCJlbWFpbCI6Imh5YW4yODkzQGdtYWlsLmNvbSJ9.bmQ5KOzyUiSpPH1QrZvDtGwk8VnK3HQfbU6eaVJ1_6QOlhi4-xeRCWBCZJIfcK2F18LXhQJ17Hwx-7dnm4HnVDBVyZb80qmVXO-vGX8JauA8ulwsZhyjX09TiqBmTEhip-MqpPq6SRyR5tErpJ6dF1IFg6i18JU1mLqE2XIy3SxZc4RtK5VW7J92y-Sd_8z0qgsXdfkDOEWi96DnQcrR1YXIjWonhj0T8WkcH_p94Bfp_SUxKLhTu-PpLU8W0HLNtgMC-VwtaxcPdNaT84uE8qjho9aXxu08GNgquqElTqkZi1Ru9njCkixPpYq4tt5mud-Qr1CHu9qLx5UG2zGeVg"
                                        },
                                        "RefreshToken": {
                                            "type": "string",
                                            "description": "JWT refresh token",
                                            "example": "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.c7_A1VYdJPxjjpiU6_a7kTWCYZjXpeYzV1HdH3GcPok524dKEK_7IXDkujqQxPEhGiEmW3MuReskJhJy9Jv8xS4jI01QD4RSBcQYid1RqfTO0zYGsN0mrJfkkW9qbtgk7hNw4YJDVCrsBBY2Q2q9PTQkZojwkXEhVvkA4H1JU9XEx1Z6rKljHVfIvUyl93Be0qA7cDHsRgAOnde9BeMX_1bxJmVmgX_1I0AwGH5hrKf3L1wAY2qQR5aXw6NfeHOz63YJxfv9B5gRW57GfgncRkYbo7zs4PdTTug9FmciUcOR73bg5__aYC--RpQtTjP9cnUPWaZKhangYmnDv45AfA.YMKu7gsb08Lg47pI.53cIDAtFzHVfIk-U9-0VrKRYqHKjA287noa7fnMJdh7I9KpV5JDNHxRPDbFPvdyuRYdcjKEOsxM9R0ebX0PbwL7NcCyd0WbDBn8EysvEWvtj8FweJ-z3OiQSZkwydWxV3RAWe4q-D1U7aZLJwOsqAP3rgjMXH0ThysiBfjBt54euGNsd1x2bMDBy66qYFYAR1MpqCCdVL468kGUi9grLOedwynsrdEFZkggWQ7ZLbjL1jQpg8AkdnjFSX5lLrL4eMYyAP2ZVkFOnfC4g59QJocsEvdhV0PFKxgePW8IPPar9R8kmCFzeRHYmm7nih7d__tgVBI8zfqjxskUwmMNqdArC4GLBqmMXDFUw_GjTgAs8RyaWDUPyVEI5ezy-J1p0Nq4TVFs6Ac_AYgv3muarpnfA6ZMPxiHWGFzTjYeqAS6EvhgzMW8_99bJ_uDgsHnomA9IF4VOW1yIXxsVoMb__QK5Db02bLueMCMkau33ugSF8JS9pnI41tkBWhuiXSEWEui4G3WMJ8_yM_JNWyGbDVFXBsGeC6J8J0U7SLmjNOmfD2zEbx-UWBc5JLs1nGSkHV3UMHarGgOIlFVHGunnakCPyRo9RJmpsAhxuywALUveHJPSrwpJx-QJ6dcs5DYWb19HyvEZc5kJbAb0PeImVJ5hnMNzZY9xO5eOIDAh7sznZr_ORuKuFdj2Tk1IhfxueHre8-L7Ntap8MTW8rw6kbcuQ1EHac4-2phqZftLuHrvBQXlqHf-n_WW8OqGlwWzYQahLKw6tNT3qbYhHOyGCxVuUME5ABxlK5qUwt1uOsQ250McRYskfSVneeztZYvTFBcBfcfVciQ41FKVcCKswDuGl1-n60Dp7wAL_vHqXf2j93GH5KUocttrpMgqOF4QyujnnEZBZt6uT9IHCBFGXezGX-UcnPM_LLMY7m0cwHqHClCJgg9D13pwwRukjtlCrBm9jZAA7VTibBxatwlC8awaNG978JILk9CrIj72q6wFVxogWO1jv2-pOyNrgf_ZVhdaFEYIlVeIu6XyJ04KIfvbTMIoqTd6hnd5XgzlVDWpfeDzslbcRlFHEogIvLCpKyDhymfHsnpImTbYGkM6zVbRPcoVqppcx6XxSlBkOoZjuvobR1y9D4iok77bZD28UngixD0eIhTE1_nKDdS12qFYhsRMHPJevtRXFj59G9sCQZDtBg0ev2v9wEMBh_LGXwm87nwGdhAulZ7mdaGcpjqo69tGM0lAtz4LJeViGjQwGRHszmXFQ3VsHyS17kZk-6vAfyXeHe_xs4QDjjPXTd9rHYW0quMMfupfqnIG35D0nTBRNAp2lzvUxw.FMMP5l6-X1lE_zTB8M_55A"
                                        },
                                        "TokenType": {
                                            "type": "string",
                                            "description": "Type of token",
                                            "example": "Bearer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing ID Token": {
                                        "value": {
                                            "error": "MISSING_GOOGLE_ID_TOKEN",
                                            "message": "Google ID token is required."
                                        }
                                    },
                                    "Invalid ID Token Type": {
                                        "value": {
                                            "error": "INVALID_GOOGLE_ID_TOKEN_TYPE",
                                            "message": "Google ID token must be a string."
                                        }
                                    },
                                    "Invalid ID Token": {
                                        "value": {
                                            "error": "INVALID_GOOGLE_ID_TOKEN",
                                            "message": "Invalid Google ID token format."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/auth/id/verify": {
            "post": {
                "tags": ["Auth"],
                "summary": "Create Stripe Identity Verification Session",
                "description": "Creates a Stripe Identity Verification Session for a user.",
                "operationId": "createVerificationSession",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "clientSecret": {
                                            "type": "string",
                                            "description": "Stripe verification session client secret",
                                            "example": "vs_1RLiciDVprfwF09mtJgSfMAY_secret_live_YWNjdF8xUktCZkxEVnByZndGMDltLF9TR0Y2TlAydDFMMFJEZ2ltVGRUQnRZOVRRVVNKbWRP0100p65i04pT"
                                        },
                                        "ephemeralKey": {
                                            "type": "string",
                                            "description": "Stripe verification session client secret",
                                            "example": "ek_live_YWNjdF8xUktCZkxEVnByZndGMDltLGRqS1ptTTJuZThQTERoRVZyZkhUNDFydnJSR21HWTQ_00f0TdCQUo"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },

        "/v1/user/profile": {
            "get": {
                "tags": ["User"],
                "summary": "Get User Profile",
                "description": "Retrieves the authenticated user's profile information. If the user is a verified host, additional host profile data will be included in the response.",
                "operationId": "getUserProfile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "userId": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "User's unique identifier",
                                            "example": "123e4567-e89b-12d3-a456-426614174000"
                                        },
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "description": "User's email address",
                                            "example": "john.doe@example.com"
                                        },
                                        "firstName": {
                                            "type": "string",
                                            "description": "User's first name",
                                            "example": "John"
                                        },
                                        "lastName": {
                                            "type": "string",
                                            "description": "User's last name",
                                            "example": "Doe"
                                        },
                                        "phoneNumber": {
                                            "type": "string",
                                            "description": "User's phone number",
                                            "example": "+1234567890"
                                        },
                                        "profileImageUrl": {
                                            "type": "string",
                                            "format": "uri",
                                            "description": "URL to user's profile image",
                                            "example": "https://example.com/images/profile.jpg"
                                        },
                                        "isHost": {
                                            "type": "boolean",
                                            "description": "Indicates if the user is a verified host (only present when true)",
                                            "example": true
                                        },
                                        "bio": {
                                            "type": "string",
                                            "description": "Host's biography (only included for verified hosts)",
                                            "example": "Passionate local guide with 5+ years of experience showing visitors the authentic side of our city."
                                        },
                                        "languages": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "description": "Languages spoken by the host (only included for verified hosts)",
                                            "example": [
                                                "English",
                                                "Spanish",
                                                "French"
                                            ]
                                        },
                                        "socials": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "uri"
                                            },
                                            "description": "Host's social media links (only included for verified hosts)",
                                            "example": [
                                                "https://www.instagram.com/john_doe",
                                                "https://www.facebook.com/john.doe"
                                            ]
                                        },
                                        "isActive": {
                                            "type": "boolean",
                                            "description": "Host's active status (only included for verified hosts)",
                                            "example": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "User Not Found": {
                                        "value": {
                                            "error": "USER_NOT_FOUND",
                                            "message": "User does not exist."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            },
            "put": {
                "tags": ["User"],
                "summary": "Update User Profile",
                "description": "Update the user's profile information",
                "operationId": "updateUserProfile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "requestBody": {
                    "description": "User profile update data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "firstName": {
                                        "type": "string",
                                        "description": "User's first name",
                                        "example": "John"
                                    },
                                    "lastName": {
                                        "type": "string",
                                        "description": "User's last name",
                                        "example": "Doe"
                                    },
                                    "phoneNumber": {
                                        "type": "string",
                                        "description": "User's phone number",
                                        "example": "+1234567890"
                                    }
                                },
                                "minProperties": 1
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User profile successfully updated."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "User Not Found": {
                                        "value": {
                                            "error": "USER_NOT_FOUND",
                                            "message": "User does not exist."
                                        }
                                    },
                                    "At least one field is required": {
                                        "value": {
                                            "error": "VALIDATION_ERROR",
                                            "message": "At least one field is required."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/user/profile/image/upload-url": {
            "get": {
                "tags": ["User"],
                "summary": "Get Profile Image Upload URL",
                "description": "Retrieves an profile image upload URL for authenticated user.",
                "operationId": "userGetProfileImageUploadUrl",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    },
                    {
                        "in": "query",
                        "name": "mimeType",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "image/jpeg"
                        },
                        "description": "MIME type of the image to be uploaded",
                        "example": "image/jpeg"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "uploadUrl": {
                                            "type": "string",
                                            "format": "uri",
                                            "description": "URL to upload the profile image",
                                            "example": "https://ohana-assets-bucket-dev.s3.us-east-1.amazonaws.com/users/443844d8-f0c1-7078-d71f-11cb010411f7/profile/images/443844d8-f0c1-7078-d71f-11cb010411f7_1747672978.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAVYDV5VSHCSHFV3VW%2F20250519%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250519T164258Z&X-Amz-Expires=600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjENn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIHpNuF18iA8ia6HyS3qXv0y4fGE7wlJ6qx3hDJMDs7%2B3AiAg5y14LupT9gW6lkxotBe2uLX7c6Ytr0G5mUUSFqkJbCqqAwiS%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDM5NTM4NDMwMjczNCIMSWVO2cHfDEh68xrNKv4Ck9RlsJpqkAXe4hxTJPP%2BridzXq2jnFH8EoHVJ9tCCptEG2SNACE3LSnyAvpZJtmBB9eEoyqwS33D2dfV5cyl0576Fy7q%2BR237lGuB%2Fp4aI9RI4XAJzPQZ7aevhEhO0bSEnPa6At49hHxp3Eobcdga2Ole%2B1AXnIU76dYjEN8C3DpraFc3l6%2BUqXPcf6SSz1F%2B8osk9AwPRQ5oq8ZjbNmF7kLoAblH%2Bw%2BhiNBCWpF3EWlCSrtl4UM2tt30uLskcUA1TKOD8bhJDozam%2F5xOf%2BSabJaQAShW2PyiGuhACXh0D0R4LfwNl9dliZQ0saruCgrsxsQOR8AE2Ygl54MPpVqqkWfRPdVIQkdMqg%2F7ZATUQ3Gg%2BLeB0CY8C48BA56bpskqCakuRe7aDxtij9zm7YzifhFtIVJ8e0F009oKJHMh%2FGD0JIhylnqWONApPnIsr2%2Fp8vLOYGI%2FTYpXNy76PIkn%2F7rPM4VanqpYKHR%2Bst1TRXyG5K2ypZji0Ut2wxojCSv63BBjqeAWsA2ALM%2FVseA%2BwlLG8nX3ALzlO82mMPWwgc1p8oZAWDZZ8B5z5rMUy11yJIP8mOalrzjsA9zL1%2FvrOzsFxQPy2K5Y%2BFGdUWy2VdUzGtPcvbCfgqYvjUc2dfovRqEvBCRZGr61BVLDwnKa0dk%2Fqol8KdWb%2BO8dI7eCIsnimz5fo8rciMe8ZpdyA%2BKf5sQ5nB%2BdUh8EzsztOP77dD8cbJ&X-Amz-Signature=00fc28979eb33aa79bc2f7ba42f5b1b30ef5d1411cba9c05fd9a0a00469b64ce&X-Amz-SignedHeaders=host&x-amz-checksum-crc32=AAAAAA%3D%3D&x-amz-sdk-checksum-algorithm=CRC32&x-id=PutObject"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "User Not Found": {
                                        "value": {
                                            "error": "USER_NOT_FOUND",
                                            "message": "User does not exist."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },

        "/v1/host/profile": {
            "get": {
                "tags": ["Host"],
                "summary": "Get Host Profile",
                "description": "Retrieves the authenticated host's profile information",
                "operationId": "getHostProfile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "bio": {
                                            "type": "string",
                                            "format": "string",
                                            "description": "Host's biography",
                                            "example": "Software engineer, Dog lover, occasional hiker, and amateur baker based in Seattle."
                                        },
                                        "languages": {
                                            "type": "array",
                                            "format": "string",
                                            "description": "Languages spoken by the host",
                                            "example": [
                                                "English",
                                                "Thai",
                                                "Mandarin"
                                            ]
                                        },
                                        "socials": {
                                            "type": "array",
                                            "format": "string",
                                            "description": "Host's social media links",
                                            "example": [
                                                "https://www.instagram.com/john_doe",
                                                "https://www.facebook.com/john.doe",
                                                "https://www.twitter.com/john_doe"
                                            ]
                                        },
                                        "isActive": {
                                            "type": "boolean",
                                            "format": "boolean",
                                            "description": "Host's active status",
                                            "example": true
                                        },
                                        "profileImageUrl": {
                                            "type": "string",
                                            "format": "uri",
                                            "description": "URL to user's profile image",
                                            "example": "https://example.com/images/profile.jpg"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Host Not Found": {
                                        "value": {
                                            "error": "HOST_NOT_FOUND",
                                            "message": "Host does not exist."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            },
            "put": {
                "tags": ["Host"],
                "summary": "Update Host Profile",
                "description": "Update the host's profile information",
                "operationId": "updateHostProfile",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "requestBody": {
                    "description": "Host profile update data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "bio": {
                                        "type": "string",
                                        "format": "string",
                                        "description": "Host's biography",
                                        "example": "Software engineer, Dog lover, occasional hiker, and amateur baker based in Seattle."
                                    },
                                    "languages": {
                                        "type": "array",
                                        "format": "string",
                                        "description": "Languages spoken by the host",
                                        "example": [
                                            "English",
                                            "Thai",
                                            "Mandarin"
                                        ]
                                    },
                                    "phoneNumber": {
                                        "type": "string",
                                        "description": "User's phone number",
                                        "example": "+1234567890"
                                    }
                                },
                                "minProperties": 1
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User profile successfully updated."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "User Not Found": {
                                        "value": {
                                            "error": "USER_NOT_FOUND",
                                            "message": "User does not exist."
                                        }
                                    },
                                    "At least one field is required": {
                                        "value": {
                                            "error": "VALIDATION_ERROR",
                                            "message": "At least one field is required."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/host/experiences": {
            "get": {
                "tags": ["Host"],
                "summary": "Get Host Experiences",
                "description": "Retrieves all experiences for the authenticated host",
                "operationId": "hostGetExperiences",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "description": "Experience unique identifier",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "Experience title",
                                                "example": "Authentic Thai Cooking Class in Bangkok"
                                            },
                                            "tagline": {
                                                "type": "string",
                                                "description": "Short experience tagline",
                                                "example": "Learn to cook traditional Thai dishes with a local chef"
                                            },
                                            "categoryId": {
                                                "type": "integer",
                                                "description": "Main category ID",
                                                "example": 1
                                            },
                                            "subCategoryId": {
                                                "type": "integer",
                                                "description": "Sub category ID",
                                                "example": 5
                                            },
                                            "languages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "description": "Languages spoken during the experience",
                                                "example": ["English", "Thai"]
                                            },
                                            "experienceType": {
                                                "type": "string",
                                                "enum": [
                                                    "indoor",
                                                    "outdoor",
                                                    "both"
                                                ],
                                                "description": "Type of experience location",
                                                "example": "indoor"
                                            },
                                            "description": {
                                                "type": "string",
                                                "description": "Detailed experience description",
                                                "example": "Join me for an authentic Thai cooking experience where you'll learn to prepare traditional dishes using fresh local ingredients."
                                            },
                                            "startingLocationAddress": {
                                                "type": "string",
                                                "description": "Starting location address",
                                                "example": "123 Khao San Road, Bangkok, Thailand"
                                            },
                                            "startingLocation": {
                                                "type": "array",
                                                "items": {
                                                    "type": "number"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2,
                                                "description": "Starting location coordinates [longitude, latitude]",
                                                "example": [100.5018, 13.7563]
                                            },
                                            "endingLocationAddress": {
                                                "type": "string",
                                                "description": "Ending location address",
                                                "example": "123 Khao San Road, Bangkok, Thailand"
                                            },
                                            "endingLocation": {
                                                "type": "array",
                                                "items": {
                                                    "type": "number"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2,
                                                "description": "Ending location coordinates [longitude, latitude]",
                                                "example": [100.5018, 13.7563]
                                            },
                                            "meetingLocation": {
                                                "type": "object",
                                                "properties": {
                                                    "instructions": {
                                                        "type": "string",
                                                        "description": "Meeting location instructions",
                                                        "example": "Meet at the front entrance of the building. Look for the red door."
                                                    },
                                                    "imageUrl": {
                                                        "type": "string",
                                                        "format": "uri",
                                                        "description": "Optional image URL for meeting location",
                                                        "example": "https://example.com/meeting-point.jpg"
                                                    }
                                                }
                                            },
                                            "pricePerPerson": {
                                                "type": "integer",
                                                "description": "Price per person in cents",
                                                "example": 2500
                                            },
                                            "groupDiscountsEnabled": {
                                                "type": "boolean",
                                                "description": "Whether group discounts are enabled",
                                                "example": true
                                            },
                                            "discountPercentageFor3Plus": {
                                                "type": "integer",
                                                "description": "Discount percentage for 3+ people",
                                                "example": 10
                                            },
                                            "discountPercentageFor5Plus": {
                                                "type": "integer",
                                                "description": "Discount percentage for 5+ people",
                                                "example": 15
                                            },
                                            "earlyBirdEnabled": {
                                                "type": "boolean",
                                                "description": "Whether early bird discounts are enabled",
                                                "example": true
                                            },
                                            "earlyBirdDiscountPercentage": {
                                                "type": "integer",
                                                "description": "Early bird discount percentage",
                                                "example": 10
                                            },
                                            "earlyBirdDaysInAdvance": {
                                                "type": "integer",
                                                "description": "Days in advance for early bird rate",
                                                "example": 14
                                            },
                                            "cancellationPolicy": {
                                                "type": "string",
                                                "enum": [
                                                    "strict",
                                                    "moderate",
                                                    "flexible"
                                                ],
                                                "description": "Cancellation policy",
                                                "example": "moderate"
                                            },
                                            "minGuests": {
                                                "type": "integer",
                                                "description": "Minimum number of guests",
                                                "example": 2
                                            },
                                            "maxGuests": {
                                                "type": "integer",
                                                "description": "Maximum number of guests",
                                                "example": 6
                                            },
                                            "autoCancelEnabled": {
                                                "type": "boolean",
                                                "description": "Whether to auto-cancel if minimum not met",
                                                "example": false
                                            },
                                            "autoCancelHours": {
                                                "type": "integer",
                                                "description": "Hours before auto-cancel if minimum not met",
                                                "example": 24
                                            },
                                            "coverImageUrl": {
                                                "type": "string",
                                                "format": "uri",
                                                "description": "Cover image URL for the experience",
                                                "example": "https://example.com/cover-image.jpg"
                                            },
                                            "galleryImageUrls": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "format": "uri"
                                                },
                                                "description": "Gallery image URLs",
                                                "example": [
                                                    "https://example.com/gallery1.jpg",
                                                    "https://example.com/gallery2.jpg"
                                                ]
                                            },
                                            "includedItems": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "food",
                                                        "drinks",
                                                        "transport",
                                                        "equipment"
                                                    ]
                                                },
                                                "description": "Items included in the experience",
                                                "example": ["food", "drinks"]
                                            },
                                            "whatToBring": {
                                                "type": "string",
                                                "description": "What participants should bring",
                                                "example": "Please bring comfortable clothes and closed-toe shoes."
                                            },
                                            "physicalRequirements": {
                                                "type": "string",
                                                "enum": [
                                                    "low",
                                                    "medium",
                                                    "high"
                                                ],
                                                "description": "Physical requirement level",
                                                "example": "low"
                                            },
                                            "ageRange": {
                                                "type": "string",
                                                "enum": [
                                                    "18-25",
                                                    "26-35",
                                                    "36-45",
                                                    "46-55",
                                                    "56-65",
                                                    "66+"
                                                ],
                                                "description": "Recommended age group",
                                                "example": "18-25"
                                            },
                                            "accessibilityInfo": {
                                                "type": "string",
                                                "description": "Accessibility information",
                                                "example": "The venue is wheelchair accessible with ramps and accessible restrooms."
                                            },
                                            "durationHours": {
                                                "type": "integer",
                                                "description": "Duration in hours",
                                                "example": 3
                                            },
                                            "timezone": {
                                                "type": "string",
                                                "description": "IANA timezone identifier",
                                                "example": "Asia/Bangkok"
                                            },
                                            "status": {
                                                "type": "string",
                                                "description": "Experience status",
                                                "example": "published"
                                            },
                                            "isPublic": {
                                                "type": "boolean",
                                                "description": "Whether the experience is public",
                                                "example": true
                                            },
                                            "createdAt": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "Timestamp when the experience was created",
                                                "example": "2024-01-01T00:00:00Z"
                                            },
                                            "updatedAt": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "Timestamp when the experience was last updated",
                                                "example": "2024-01-01T00:00:00Z"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Host Not Found": {
                                        "value": {
                                            "error": "HOST_NOT_FOUND",
                                            "message": "Host does not exist."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            },
            "post": {
                "tags": ["Host"],
                "summary": "Create Experience",
                "description": "Creates a new experience for the authenticated host. All fields must meet the specified validation requirements. Image fields (coverImageUrl and galleryImageUrls) are optional and can be added later via the update endpoint.",
                "operationId": "hostCreateExperience",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "requestBody": {
                    "description": "Experience creation data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "title",
                                    "tagline",
                                    "category",
                                    "languages",
                                    "experienceType",
                                    "description",
                                    "startingLocation",
                                    "endingLocation",
                                    "meetingLocation",
                                    "pricePerPerson",
                                    "cancellationPolicy",
                                    "groupSize",
                                    "physicalRequirements",
                                    "ageRecommendations",
                                    "accessibilityInfo",
                                    "durationHours",
                                    "timezone",
                                    "availability"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "minLength": 15,
                                        "maxLength": 80,
                                        "description": "Experience title",
                                        "example": "Authentic Thai Cooking Class in Bangkok"
                                    },
                                    "tagline": {
                                        "type": "string",
                                        "minLength": 10,
                                        "maxLength": 100,
                                        "description": "Short experience tagline",
                                        "example": "Learn to cook traditional Thai dishes with a local chef"
                                    },
                                    "category": {
                                        "type": "object",
                                        "required": ["mainId", "subId"],
                                        "properties": {
                                            "mainId": {
                                                "type": "integer",
                                                "description": "Main category ID",
                                                "example": 1
                                            },
                                            "subId": {
                                                "type": "integer",
                                                "description": "Sub category ID",
                                                "example": 5
                                            }
                                        }
                                    },
                                    "languages": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "Languages spoken during the experience",
                                        "example": ["English", "Thai"]
                                    },
                                    "experienceType": {
                                        "type": "string",
                                        "enum": ["indoor", "outdoor", "both"],
                                        "description": "Type of experience location",
                                        "example": "indoor"
                                    },
                                    "description": {
                                        "type": "string",
                                        "minLength": 10,
                                        "maxLength": 1000,
                                        "description": "Detailed experience description",
                                        "example": "Join me for an authentic Thai cooking experience where you'll learn to prepare traditional dishes using fresh local ingredients."
                                    },
                                    "startingLocation": {
                                        "type": "object",
                                        "required": [
                                            "address",
                                            "latitude",
                                            "longitude"
                                        ],
                                        "properties": {
                                            "address": {
                                                "type": "string",
                                                "minLength": 10,
                                                "maxLength": 500,
                                                "description": "Starting location address",
                                                "example": "123 Khao San Road, Bangkok, Thailand"
                                            },
                                            "latitude": {
                                                "type": "number",
                                                "description": "Starting location latitude",
                                                "example": 13.7563
                                            },
                                            "longitude": {
                                                "type": "number",
                                                "description": "Starting location longitude",
                                                "example": 100.5018
                                            }
                                        }
                                    },
                                    "endingLocation": {
                                        "type": "object",
                                        "required": [
                                            "address",
                                            "latitude",
                                            "longitude"
                                        ],
                                        "properties": {
                                            "address": {
                                                "type": "string",
                                                "minLength": 10,
                                                "maxLength": 500,
                                                "description": "Ending location address",
                                                "example": "123 Khao San Road, Bangkok, Thailand"
                                            },
                                            "latitude": {
                                                "type": "number",
                                                "description": "Ending location latitude",
                                                "example": 13.7563
                                            },
                                            "longitude": {
                                                "type": "number",
                                                "description": "Ending location longitude",
                                                "example": 100.5018
                                            }
                                        }
                                    },
                                    "meetingLocation": {
                                        "type": "object",
                                        "required": ["instructions"],
                                        "properties": {
                                            "instructions": {
                                                "type": "string",
                                                "minLength": 10,
                                                "maxLength": 1000,
                                                "description": "Meeting location instructions",
                                                "example": "Meet at the front entrance of the building. Look for the red door."
                                            },
                                            "imageUrl": {
                                                "type": "string",
                                                "format": "uri",
                                                "description": "Optional image URL for meeting location",
                                                "example": "https://example.com/meeting-point.jpg"
                                            }
                                        }
                                    },
                                    "pricePerPerson": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "description": "Price per person in cents",
                                        "example": 2500
                                    },
                                    "groupDiscounts": {
                                        "type": "object",
                                        "properties": {
                                            "discountPercentageFor3Plus": {
                                                "type": "number",
                                                "enum": [5, 10, 15, 20, 25],
                                                "description": "Discount percentage for 3+ people",
                                                "example": 10
                                            },
                                            "discountPercentageFor5Plus": {
                                                "type": "number",
                                                "enum": [10, 15, 20, 25, 30],
                                                "description": "Discount percentage for 5+ people",
                                                "example": 15
                                            }
                                        }
                                    },
                                    "earlyBirdRate": {
                                        "type": "object",
                                        "properties": {
                                            "discountPercentage": {
                                                "type": "number",
                                                "enum": [5, 10, 15, 20, 25],
                                                "description": "Early bird discount percentage",
                                                "example": 10
                                            },
                                            "daysInAdvance": {
                                                "type": "number",
                                                "enum": [
                                                    14, 15, 16, 17, 18, 19, 20,
                                                    21, 22, 23, 24, 25, 26, 27,
                                                    28, 29, 30
                                                ],
                                                "description": "Days in advance for early bird rate",
                                                "example": 14
                                            }
                                        }
                                    },
                                    "cancellationPolicy": {
                                        "type": "string",
                                        "enum": [
                                            "strict",
                                            "moderate",
                                            "flexible"
                                        ],
                                        "description": "Cancellation policy",
                                        "example": "moderate"
                                    },
                                    "groupSize": {
                                        "type": "object",
                                        "required": ["minGuests", "maxGuests"],
                                        "properties": {
                                            "minGuests": {
                                                "type": "integer",
                                                "minimum": 1,
                                                "description": "Minimum number of guests",
                                                "example": 2
                                            },
                                            "maxGuests": {
                                                "type": "integer",
                                                "maximum": 30,
                                                "description": "Maximum number of guests",
                                                "example": 6
                                            },
                                            "autoCancelEnabled": {
                                                "type": "boolean",
                                                "description": "Whether to auto-cancel if minimum not met",
                                                "default": false,
                                                "example": false
                                            }
                                        }
                                    },
                                    "includedItems": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "food",
                                                "drinks",
                                                "transport",
                                                "equipment"
                                            ]
                                        },
                                        "description": "Items included in the experience",
                                        "example": ["food", "drinks"]
                                    },
                                    "whatToBring": {
                                        "type": "string",
                                        "minLength": 10,
                                        "maxLength": 1000,
                                        "description": "What participants should bring",
                                        "example": "Please bring comfortable clothes and closed-toe shoes."
                                    },
                                    "physicalRequirements": {
                                        "type": "string",
                                        "enum": ["low", "medium", "high"],
                                        "description": "Physical requirement level",
                                        "example": "low"
                                    },
                                    "ageRecommendations": {
                                        "type": "string",
                                        "enum": [
                                            "18-25",
                                            "26-35",
                                            "36-45",
                                            "46-55",
                                            "56-65",
                                            "66+"
                                        ],
                                        "description": "Recommended age group",
                                        "example": "18-25"
                                    },
                                    "accessibilityInfo": {
                                        "type": "string",
                                        "minLength": 10,
                                        "maxLength": 1000,
                                        "description": "Accessibility information",
                                        "example": "The venue is wheelchair accessible with ramps and accessible restrooms."
                                    },
                                    "durationHours": {
                                        "type": "number",
                                        "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                                        "description": "Duration in hours",
                                        "example": 3
                                    },
                                    "timezone": {
                                        "type": "string",
                                        "description": "IANA timezone identifier",
                                        "example": "Asia/Bangkok"
                                    },
                                    "availability": {
                                        "type": "object",
                                        "required": [
                                            "startDate",
                                            "daysOfWeek",
                                            "timeSlots"
                                        ],
                                        "properties": {
                                            "startDate": {
                                                "type": "string",
                                                "format": "date",
                                                "description": "Availability start date",
                                                "example": "2024-06-01"
                                            },
                                            "endDate": {
                                                "type": "string",
                                                "format": "date",
                                                "description": "Optional availability end date",
                                                "example": "2024-12-31"
                                            },
                                            "daysOfWeek": {
                                                "type": "array",
                                                "items": {
                                                    "type": "integer",
                                                    "minimum": 0,
                                                    "maximum": 6
                                                },
                                                "minItems": 1,
                                                "description": "Days of week (0=Sunday, 6=Saturday)",
                                                "example": [1, 2, 3, 4, 5]
                                            },
                                            "timeSlots": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
                                                },
                                                "minItems": 1,
                                                "description": "Available time slots in HH:MM format",
                                                "example": [
                                                    "10:00",
                                                    "14:00",
                                                    "18:00"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Experience"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Host Not Found": {
                                        "value": {
                                            "error": "HOST_NOT_FOUND",
                                            "message": "Host does not exist."
                                        }
                                    },
                                    "Missing Title": {
                                        "value": {
                                            "error": "MISSING_EXPERIENCE_TITLE",
                                            "message": "Experience title is required."
                                        }
                                    },
                                    "Invalid Title Length": {
                                        "value": {
                                            "error": "INVALID_EXPERIENCE_TITLE_MIN_LENGTH",
                                            "message": "Experience title must be at least 15 characters."
                                        }
                                    },
                                    "Missing Category": {
                                        "value": {
                                            "error": "MISSING_EXPERIENCE_CATEGORY",
                                            "message": "Experience category is required."
                                        }
                                    },
                                    "Missing Languages": {
                                        "value": {
                                            "error": "MISSING_LANGUAGES",
                                            "message": "Languages are required."
                                        }
                                    },
                                    "Invalid Language": {
                                        "value": {
                                            "error": "INVALID_LANGUAGE_VALUE",
                                            "message": "Invalid language value."
                                        }
                                    },
                                    "Main Category Not Found": {
                                        "value": {
                                            "error": "Main category not found",
                                            "message": "Main category not found"
                                        }
                                    },
                                    "Sub Category Mismatch": {
                                        "value": {
                                            "error": "Sub category not found or doesn't belong to category.",
                                            "message": "Sub category not found or doesn't belong to category."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/host/experiences/{experienceId}": {
            "put": {
                "tags": ["Host"],
                "summary": "Update Experience",
                "description": "Updates an existing experience for the authenticated host. All fields are optional - only provided fields will be updated. The host can only update their own experiences.",
                "operationId": "hostUpdateExperience",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    },
                    {
                        "in": "path",
                        "name": "experienceId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Experience unique identifier",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                ],
                "requestBody": {
                    "description": "Experience update data (all fields are optional)",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "minLength": 15,
                                        "maxLength": 80,
                                        "description": "Experience title",
                                        "example": "Authentic Thai Cooking Class in Bangkok"
                                    },
                                    "tagline": {
                                        "type": "string",
                                        "minLength": 10,
                                        "maxLength": 100,
                                        "description": "Short experience tagline",
                                        "example": "Learn to cook traditional Thai dishes with a local chef"
                                    },
                                    "category": {
                                        "type": "object",
                                        "properties": {
                                            "mainId": {
                                                "type": "integer",
                                                "description": "Main category ID",
                                                "example": 1
                                            },
                                            "subId": {
                                                "type": "integer",
                                                "description": "Sub category ID",
                                                "example": 5
                                            }
                                        }
                                    },
                                    "languages": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "Languages spoken during the experience",
                                        "example": ["English", "Thai"]
                                    },
                                    "experienceType": {
                                        "type": "string",
                                        "enum": ["indoor", "outdoor", "both"],
                                        "description": "Type of experience location",
                                        "example": "indoor"
                                    },
                                    "description": {
                                        "type": "string",
                                        "minLength": 10,
                                        "maxLength": 1000,
                                        "description": "Detailed experience description",
                                        "example": "Join me for an authentic Thai cooking experience where you'll learn to prepare traditional dishes using fresh local ingredients."
                                    },
                                    "startingLocation": {
                                        "type": "object",
                                        "properties": {
                                            "address": {
                                                "type": "string",
                                                "minLength": 10,
                                                "maxLength": 500,
                                                "description": "Starting location address",
                                                "example": "123 Khao San Road, Bangkok, Thailand"
                                            },
                                            "latitude": {
                                                "type": "number",
                                                "description": "Starting location latitude",
                                                "example": 13.7563
                                            },
                                            "longitude": {
                                                "type": "number",
                                                "description": "Starting location longitude",
                                                "example": 100.5018
                                            }
                                        }
                                    },
                                    "endingLocation": {
                                        "type": "object",
                                        "properties": {
                                            "address": {
                                                "type": "string",
                                                "minLength": 10,
                                                "maxLength": 500,
                                                "description": "Ending location address",
                                                "example": "123 Khao San Road, Bangkok, Thailand"
                                            },
                                            "latitude": {
                                                "type": "number",
                                                "description": "Ending location latitude",
                                                "example": 13.7563
                                            },
                                            "longitude": {
                                                "type": "number",
                                                "description": "Ending location longitude",
                                                "example": 100.5018
                                            }
                                        }
                                    },
                                    "meetingLocation": {
                                        "type": "object",
                                        "properties": {
                                            "instructions": {
                                                "type": "string",
                                                "minLength": 10,
                                                "maxLength": 1000,
                                                "description": "Meeting location instructions",
                                                "example": "Meet at the front entrance of the building. Look for the red door."
                                            },
                                            "imageUrl": {
                                                "type": "string",
                                                "format": "uri",
                                                "description": "Optional image URL for meeting location",
                                                "example": "https://example.com/meeting-point.jpg"
                                            }
                                        }
                                    },
                                    "pricePerPerson": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "description": "Price per person in cents",
                                        "example": 2500
                                    },
                                    "groupDiscounts": {
                                        "type": "object",
                                        "properties": {
                                            "discountPercentageFor3Plus": {
                                                "type": "number",
                                                "enum": [5, 10, 15, 20, 25],
                                                "description": "Discount percentage for 3+ people",
                                                "example": 10
                                            },
                                            "discountPercentageFor5Plus": {
                                                "type": "number",
                                                "enum": [10, 15, 20, 25, 30],
                                                "description": "Discount percentage for 5+ people",
                                                "example": 15
                                            }
                                        }
                                    },
                                    "earlyBirdRate": {
                                        "type": "object",
                                        "properties": {
                                            "discountPercentage": {
                                                "type": "number",
                                                "enum": [5, 10, 15, 20, 25],
                                                "description": "Early bird discount percentage",
                                                "example": 10
                                            },
                                            "daysInAdvance": {
                                                "type": "number",
                                                "enum": [
                                                    14, 15, 16, 17, 18, 19, 20,
                                                    21, 22, 23, 24, 25, 26, 27,
                                                    28, 29, 30
                                                ],
                                                "description": "Days in advance for early bird rate",
                                                "example": 14
                                            }
                                        }
                                    },
                                    "cancellationPolicy": {
                                        "type": "string",
                                        "enum": [
                                            "strict",
                                            "moderate",
                                            "flexible"
                                        ],
                                        "description": "Cancellation policy",
                                        "example": "moderate"
                                    },
                                    "groupSize": {
                                        "type": "object",
                                        "properties": {
                                            "minGuests": {
                                                "type": "integer",
                                                "minimum": 1,
                                                "description": "Minimum number of guests",
                                                "example": 2
                                            },
                                            "maxGuests": {
                                                "type": "integer",
                                                "maximum": 30,
                                                "description": "Maximum number of guests",
                                                "example": 6
                                            },
                                            "autoCancelEnabled": {
                                                "type": "boolean",
                                                "description": "Whether to auto-cancel if minimum not met",
                                                "default": false,
                                                "example": false
                                            }
                                        }
                                    },
                                    "includedItems": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "food",
                                                "drinks",
                                                "transport",
                                                "equipment"
                                            ]
                                        },
                                        "description": "Items included in the experience",
                                        "example": ["food", "drinks"]
                                    },
                                    "whatToBring": {
                                        "type": "string",
                                        "minLength": 10,
                                        "maxLength": 1000,
                                        "description": "What participants should bring",
                                        "example": "Please bring comfortable clothes and closed-toe shoes."
                                    },
                                    "physicalRequirements": {
                                        "type": "string",
                                        "enum": ["low", "medium", "high"],
                                        "description": "Physical requirement level",
                                        "example": "low"
                                    },
                                    "ageRecommendations": {
                                        "type": "string",
                                        "enum": [
                                            "18-25",
                                            "26-35",
                                            "36-45",
                                            "46-55",
                                            "56-65",
                                            "66+"
                                        ],
                                        "description": "Recommended age group",
                                        "example": "18-25"
                                    },
                                    "accessibilityInfo": {
                                        "type": "string",
                                        "minLength": 10,
                                        "maxLength": 1000,
                                        "description": "Accessibility information",
                                        "example": "The venue is wheelchair accessible with ramps and accessible restrooms."
                                    },
                                    "durationHours": {
                                        "type": "number",
                                        "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                                        "description": "Duration in hours",
                                        "example": 3
                                    },
                                    "timezone": {
                                        "type": "string",
                                        "description": "IANA timezone identifier",
                                        "example": "Asia/Bangkok"
                                    },
                                    "coverImageUrl": {
                                        "type": "string",
                                        "format": "uri",
                                        "description": "Cover image URL for the experience",
                                        "example": "https://example.com/cover-image.jpg"
                                    },
                                    "galleryImageUrls": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "uri"
                                        },
                                        "description": "Gallery image URLs",
                                        "example": [
                                            "https://example.com/gallery1.jpg",
                                            "https://example.com/gallery2.jpg"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Experience"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Host Not Found": {
                                        "value": {
                                            "error": "HOST_NOT_FOUND",
                                            "message": "Host does not exist."
                                        }
                                    },
                                    "Experience Not Found": {
                                        "value": {
                                            "error": "EXPERIENCE_NOT_FOUND",
                                            "message": "Experience does not exist."
                                        }
                                    },
                                    "Missing Experience ID": {
                                        "value": {
                                            "error": "MISSING_EXPERIENCE_ID",
                                            "message": "Experience ID is required."
                                        }
                                    },
                                    "Invalid Experience ID": {
                                        "value": {
                                            "error": "INVALID_EXPERIENCE_ID_UUID",
                                            "message": "Experience ID must be a valid UUID."
                                        }
                                    },
                                    "Invalid Title Length": {
                                        "value": {
                                            "error": "INVALID_EXPERIENCE_TITLE_MIN_LENGTH",
                                            "message": "Experience title must be at least 15 characters."
                                        }
                                    },
                                    "Invalid Language": {
                                        "value": {
                                            "error": "INVALID_LANGUAGE_VALUE",
                                            "message": "Invalid language value."
                                        }
                                    },
                                    "Main Category Not Found": {
                                        "value": {
                                            "error": "Main category not found",
                                            "message": "Main category not found"
                                        }
                                    },
                                    "Sub Category Mismatch": {
                                        "value": {
                                            "error": "Sub category not found or doesn't belong to category.",
                                            "message": "Sub category not found or doesn't belong to category."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Forbidden Update": {
                                        "value": {
                                            "error": "EXPERIENCE_FORBIDDEN_UPDATE",
                                            "message": "You are not authorized to update this experience."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            },
            "delete": {
                "tags": ["Host"],
                "summary": "Delete Experience",
                "description": "Deletes an existing experience for the authenticated host. The host can only delete their own experiences. This action is irreversible.",
                "operationId": "hostDeleteExperience",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    },
                    {
                        "in": "path",
                        "name": "experienceId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Experience unique identifier",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Experience successfully deleted."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Host Not Found": {
                                        "value": {
                                            "error": "HOST_NOT_FOUND",
                                            "message": "Host does not exist."
                                        }
                                    },
                                    "Experience Not Found": {
                                        "value": {
                                            "error": "EXPERIENCE_NOT_FOUND",
                                            "message": "Experience does not exist."
                                        }
                                    },
                                    "Missing Experience ID": {
                                        "value": {
                                            "error": "MISSING_EXPERIENCE_ID",
                                            "message": "Experience ID is required."
                                        }
                                    },
                                    "Invalid Experience ID": {
                                        "value": {
                                            "error": "INVALID_EXPERIENCE_ID_UUID",
                                            "message": "Experience ID must be a valid UUID."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Forbidden Delete": {
                                        "value": {
                                            "error": "EXPERIENCE_FORBIDDEN_DELETE",
                                            "message": "You are not authorized to delete this experience."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/host/experiences/image/upload-url": {
            "post": {
                "tags": ["Host"],
                "summary": "Get Experience Image Upload URLs",
                "description": "Generates pre-signed URLs for uploading experience images (cover and gallery images) to S3.",
                "operationId": "getExperienceImageUploadUrls",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "requestBody": {
                    "description": "Experience image upload request",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": ["experienceId", "images"],
                                "properties": {
                                    "experienceId": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "Experience unique identifier",
                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "required": [
                                                "mimeType",
                                                "imageType"
                                            ],
                                            "properties": {
                                                "mimeType": {
                                                    "type": "string",
                                                    "description": "MIME type of the image",
                                                    "example": "image/jpeg"
                                                },
                                                "imageType": {
                                                    "type": "string",
                                                    "enum": [
                                                        "cover",
                                                        "gallery",
                                                        "meeting-location"
                                                    ],
                                                    "description": "Type of image",
                                                    "example": "cover"
                                                }
                                            }
                                        },
                                        "minItems": 1,
                                        "maxItems": 10,
                                        "description": "Array of images to upload",
                                        "example": [
                                            {
                                                "mimeType": "image/jpeg",
                                                "imageType": "cover"
                                            },
                                            {
                                                "mimeType": "image/png",
                                                "imageType": "gallery"
                                            },
                                            {
                                                "mimeType": "image/png",
                                                "imageType": "meeting-location"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "coverUploadUrl": {
                                            "type": "string",
                                            "format": "uri",
                                            "description": "Pre-signed URL for cover image upload (null if no cover image requested)",
                                            "example": "https://ohana-assets-bucket-dev.s3.us-east-1.amazonaws.com/hosts/123e4567-e89b-12d3-a456-426614174000/experiences/456e7890-e89b-12d3-a456-426614174001/images/cover/cover-image.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&..."
                                        },
                                        "galleryUploadUrls": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "uri"
                                            },
                                            "description": "Array of pre-signed URLs for gallery image uploads (optional)",
                                            "example": [
                                                "https://ohana-assets-bucket-dev.s3.us-east-1.amazonaws.com/hosts/123e4567-e89b-12d3-a456-426614174000/experiences/456e7890-e89b-12d3-a456-426614174001/images/gallery/gallery-1.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&...",
                                                "https://ohana-assets-bucket-dev.s3.us-east-1.amazonaws.com/hosts/123e4567-e89b-12d3-a456-426614174000/experiences/456e7890-e89b-12d3-a456-426614174001/images/gallery/gallery-2.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&..."
                                            ]
                                        },
                                        "meetingLocationUploadUrls": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "uri"
                                            },
                                            "description": "Array of pre-signed URLs for meeting location image uploads (optional)",
                                            "example": [
                                                "https://ohana-assets-bucket-dev.s3.us-east-1.amazonaws.com/hosts/123e4567-e89b-12d3-a456-426614174000/experiences/456e7890-e89b-12d3-a456-426614174001/images/gallery/gallery-1.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&...",
                                                "https://ohana-assets-bucket-dev.s3.us-east-1.amazonaws.com/hosts/123e4567-e89b-12d3-a456-426614174000/experiences/456e7890-e89b-12d3-a456-426614174001/images/gallery/gallery-2.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&..."
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Experience Not Found": {
                                        "value": {
                                            "error": "EXPERIENCE_NOT_FOUND",
                                            "message": "Experience does not exist."
                                        }
                                    },
                                    "Missing Experience ID": {
                                        "value": {
                                            "error": "MISSING_EXPERIENCE_ID",
                                            "message": "Experience ID is required."
                                        }
                                    },
                                    "Invalid Experience ID": {
                                        "value": {
                                            "error": "INVALID_EXPERIENCE_ID_UUID",
                                            "message": "Experience ID must be a valid UUID."
                                        }
                                    },
                                    "Missing Images": {
                                        "value": {
                                            "error": "MISSING_IMAGES",
                                            "message": "At least one image is required."
                                        }
                                    },
                                    "Invalid MIME Type": {
                                        "value": {
                                            "error": "INVALID_MIME_TYPE",
                                            "message": "Invalid MIME type format."
                                        }
                                    },
                                    "Invalid Image Type": {
                                        "value": {
                                            "error": "INVALID_IMAGE_TYPE",
                                            "message": "Image type must be either 'cover', 'gallery' or 'meeting-location'."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/host/categories": {
            "get": {
                "tags": ["Host"],
                "summary": "Get All Categories",
                "description": "Retrieves all categories with their subcategories for authenticated hosts",
                "operationId": "getCategories",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "description": "Category unique identifier",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Category name",
                                                "example": "Adventure & Outdoor"
                                            },
                                            "slug": {
                                                "type": "string",
                                                "description": "Category URL slug",
                                                "example": "adventure-outdoor"
                                            },
                                            "subCategories": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "description": "Subcategory unique identifier",
                                                            "example": 1
                                                        },
                                                        "categoryId": {
                                                            "type": "integer",
                                                            "description": "Parent category ID",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "description": "Subcategory name",
                                                            "example": "Hiking & Trekking"
                                                        },
                                                        "slug": {
                                                            "type": "string",
                                                            "description": "Subcategory URL slug",
                                                            "example": "hiking-trekking"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Host Not Found": {
                                        "value": {
                                            "error": "HOST_NOT_FOUND",
                                            "message": "Host does not exist."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/experiences": {
            "get": {
                "tags": ["Experiences"],
                "summary": "Search Experiences",
                "description": "Search and filter experiences based on various criteria such as location, category, price range, and other filters.",
                "operationId": "searchExperiences",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    },
                    {
                        "in": "query",
                        "name": "title",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by experience title",
                        "example": "Thai Cooking"
                    },
                    {
                        "in": "query",
                        "name": "tagline",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by experience tagline",
                        "example": "Learn traditional recipes"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by experience description",
                        "example": "authentic local cuisine"
                    },
                    {
                        "in": "query",
                        "name": "startingLocationAddress",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by starting location address",
                        "example": "Bangkok"
                    },
                    {
                        "in": "query",
                        "name": "endingLocationAddress",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by ending location address",
                        "example": "Bangkok"
                    },
                    {
                        "in": "query",
                        "name": "whatToBring",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by what to bring requirements",
                        "example": "comfortable shoes"
                    },
                    {
                        "in": "query",
                        "name": "hostId",
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Filter by specific host ID",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    {
                        "in": "query",
                        "name": "categoryId",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter by main category ID",
                        "example": 1
                    },
                    {
                        "in": "query",
                        "name": "subCategoryId",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter by subcategory ID",
                        "example": 5
                    },
                    {
                        "in": "query",
                        "name": "experienceType",
                        "schema": {
                            "type": "string",
                            "enum": ["indoor", "outdoor", "both"]
                        },
                        "description": "Filter by experience type",
                        "example": "indoor"
                    },
                    {
                        "in": "query",
                        "name": "cancellationPolicy",
                        "schema": {
                            "type": "string",
                            "enum": ["strict", "moderate", "flexible"]
                        },
                        "description": "Filter by cancellation policy",
                        "example": "moderate"
                    },
                    {
                        "in": "query",
                        "name": "physicalRequirements",
                        "schema": {
                            "type": "string",
                            "enum": ["low", "medium", "high"]
                        },
                        "description": "Filter by physical requirements",
                        "example": "low"
                    },
                    {
                        "in": "query",
                        "name": "ageRange",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "18-25",
                                "26-35",
                                "36-45",
                                "46-55",
                                "56-65",
                                "66+"
                            ]
                        },
                        "description": "Filter by recommended age range",
                        "example": "18-25"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string",
                            "enum": ["draft", "published", "archived"]
                        },
                        "description": "Filter by experience status",
                        "example": "published"
                    },
                    {
                        "in": "query",
                        "name": "isPublic",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter by public/private status",
                        "example": true
                    },
                    {
                        "in": "query",
                        "name": "minPrice",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Minimum price per person in cents",
                        "example": 1000
                    },
                    {
                        "in": "query",
                        "name": "maxPrice",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Maximum price per person in cents",
                        "example": 10000
                    },
                    {
                        "in": "query",
                        "name": "minGuests",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Minimum number of guests",
                        "example": 1
                    },
                    {
                        "in": "query",
                        "name": "maxGuests",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Maximum number of guests",
                        "example": 10
                    },
                    {
                        "in": "query",
                        "name": "minDurationHours",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Minimum duration in hours",
                        "example": 1
                    },
                    {
                        "in": "query",
                        "name": "maxDurationHours",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Maximum duration in hours",
                        "example": 8
                    },
                    {
                        "in": "query",
                        "name": "latitude",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Latitude for location-based search",
                        "example": 13.7563
                    },
                    {
                        "in": "query",
                        "name": "longitude",
                        "schema": {
                            "type": "number"
                        },
                        "description": "Longitude for location-based search",
                        "example": 100.5018
                    },
                    {
                        "in": "query",
                        "name": "radiusKm",
                        "schema": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "description": "Search radius in kilometers (requires latitude and longitude)",
                        "example": 10
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Experience"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Host Not Found": {
                                        "value": {
                                            "error": "HOST_NOT_FOUND",
                                            "message": "Host does not exist."
                                        }
                                    },
                                    "Invalid Range": {
                                        "value": {
                                            "error": "VALIDATION_ERROR",
                                            "message": "Invalid range: minimum value cannot be greater than maximum value"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/experiences/time-slots": {
            "get": {
                "tags": ["Experiences"],
                "summary": "Get Experience Time Slots",
                "description": "Retrieves available time slots for a specific experience within an optional date range. Returns all upcoming time slots if no date range is specified.",
                "operationId": "getTimeSlots",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    },
                    {
                        "in": "query",
                        "name": "experienceId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Experience unique identifier",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "description": "Start date for time slot search (YYYY-MM-DD format)",
                        "example": "2024-06-01"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "description": "End date for time slot search (YYYY-MM-DD format)",
                        "example": "2024-06-30"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "format": "uuid",
                                                "description": "Time slot unique identifier",
                                                "example": "456e7890-e89b-12d3-a456-426614174001"
                                            },
                                            "experienceId": {
                                                "type": "string",
                                                "format": "uuid",
                                                "description": "Experience unique identifier",
                                                "example": "123e4567-e89b-12d3-a456-426614174000"
                                            },
                                            "date": {
                                                "type": "string",
                                                "format": "date",
                                                "description": "Date of the time slot",
                                                "example": "2024-06-15"
                                            },
                                            "startTime": {
                                                "type": "string",
                                                "description": "Start time in HH:MM format",
                                                "example": "10:00"
                                            },
                                            "endTime": {
                                                "type": "string",
                                                "description": "End time in HH:MM format",
                                                "example": "13:00"
                                            },
                                            "maxCapacity": {
                                                "type": "integer",
                                                "description": "Maximum number of guests for this time slot",
                                                "example": 8
                                            },
                                            "availableCapacity": {
                                                "type": "integer",
                                                "description": "Remaining available capacity",
                                                "example": 5
                                            },
                                            "isAvailable": {
                                                "type": "boolean",
                                                "description": "Whether the time slot is available for booking",
                                                "example": true
                                            },
                                            "timezone": {
                                                "type": "string",
                                                "description": "IANA timezone identifier",
                                                "example": "Asia/Bangkok"
                                            },
                                            "createdAt": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "Timestamp when time slot was created",
                                                "example": "2024-01-01T00:00:00Z"
                                            },
                                            "updatedAt": {
                                                "type": "string",
                                                "format": "date-time",
                                                "description": "Timestamp when time slot was last updated",
                                                "example": "2024-01-01T00:00:00Z"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Experience ID": {
                                        "value": {
                                            "error": "MISSING_EXPERIENCE_ID",
                                            "message": "Experience ID is required."
                                        }
                                    },
                                    "Invalid Experience ID": {
                                        "value": {
                                            "error": "INVALID_EXPERIENCE_ID_UUID",
                                            "message": "Experience ID must be a valid UUID."
                                        }
                                    },
                                    "Experience Not Found": {
                                        "value": {
                                            "error": "EXPERIENCE_NOT_FOUND",
                                            "message": "Experience does not exist."
                                        }
                                    },
                                    "Invalid Date Range": {
                                        "value": {
                                            "error": "INVALID_TIME_SLOT_DATE_RANGE",
                                            "message": "Invalid date range: start date cannot be after end date."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        },
        "/v1/reservations": {
            "post": {
                "tags": ["Reservations"],
                "summary": "Create Reservation",
                "description": "Creates a new reservation for an experience. Automatically calculates and applies group discounts and early bird discounts based on the experience settings. The total price is calculated after applying all applicable discounts.",
                "operationId": "createReservation",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/AuthorizationHeader"
                    }
                ],
                "requestBody": {
                    "description": "Reservation creation data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "experienceId",
                                    "timeSlotId",
                                    "numberOfGuests"
                                ],
                                "properties": {
                                    "experienceId": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "Experience unique identifier",
                                        "example": "123e4567-e89b-12d3-a456-426614174000"
                                    },
                                    "timeSlotId": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "Time slot unique identifier",
                                        "example": "456e7890-e89b-12d3-a456-426614174001"
                                    },
                                    "numberOfGuests": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 30,
                                        "description": "Number of guests for the reservation",
                                        "example": 4
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "reservation": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "description": "Reservation unique identifier",
                                                    "example": "789e0123-e89b-12d3-a456-426614174002"
                                                },
                                                "userId": {
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "description": "User unique identifier",
                                                    "example": "123e4567-e89b-12d3-a456-426614174003"
                                                },
                                                "experienceId": {
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "description": "Experience unique identifier",
                                                    "example": "123e4567-e89b-12d3-a456-426614174000"
                                                },
                                                "timeSlotId": {
                                                    "type": "string",
                                                    "format": "uuid",
                                                    "description": "Time slot unique identifier",
                                                    "example": "456e7890-e89b-12d3-a456-426614174001"
                                                },
                                                "numberOfGuests": {
                                                    "type": "integer",
                                                    "description": "Number of guests",
                                                    "example": 4
                                                },
                                                "totalPrice": {
                                                    "type": "integer",
                                                    "description": "Final price after discounts in cents",
                                                    "example": 9000
                                                },
                                                "originalPrice": {
                                                    "type": "integer",
                                                    "description": "Original price before discounts in cents",
                                                    "example": 10000
                                                },
                                                "discountApplied": {
                                                    "type": "integer",
                                                    "description": "Total discount amount in cents",
                                                    "example": 1000
                                                },
                                                "discountType": {
                                                    "type": "string",
                                                    "description": "Type of discount applied (group_3_plus, group_5_plus, early_bird, or combination)",
                                                    "nullable": true,
                                                    "example": "group_3_plus,early_bird"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "pending",
                                                        "confirmed",
                                                        "cancelled",
                                                        "completed",
                                                        "refunded"
                                                    ],
                                                    "description": "Reservation status",
                                                    "example": "confirmed"
                                                },
                                                "reservationReference": {
                                                    "type": "string",
                                                    "description": "Unique reservation reference code",
                                                    "example": "ABC123DEF456"
                                                },
                                                "guestName": {
                                                    "type": "string",
                                                    "description": "Guest name",
                                                    "example": "John Doe"
                                                },
                                                "guestEmail": {
                                                    "type": "string",
                                                    "format": "email",
                                                    "description": "Guest email",
                                                    "example": "john.doe@example.com"
                                                },
                                                "paymentStatus": {
                                                    "type": "string",
                                                    "description": "Payment status",
                                                    "example": "success"
                                                },
                                                "createdAt": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "description": "Timestamp when reservation was created",
                                                    "example": "2024-01-01T12:00:00Z"
                                                },
                                                "updatedAt": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "description": "Timestamp when reservation was last updated",
                                                    "example": "2024-01-01T12:00:00Z"
                                                }
                                            }
                                        },
                                        "appliedDiscounts": {
                                            "type": "object",
                                            "properties": {
                                                "groupDiscount": {
                                                    "type": "object",
                                                    "properties": {
                                                        "amount": {
                                                            "type": "integer",
                                                            "description": "Group discount amount in cents",
                                                            "example": 500
                                                        },
                                                        "type": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "description": "Type of group discount applied",
                                                            "example": "group_3_plus"
                                                        }
                                                    }
                                                },
                                                "earlyBirdDiscount": {
                                                    "type": "object",
                                                    "properties": {
                                                        "amount": {
                                                            "type": "integer",
                                                            "description": "Early bird discount amount in cents",
                                                            "example": 500
                                                        },
                                                        "type": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "description": "Type of early bird discount applied",
                                                            "example": "early_bird"
                                                        }
                                                    }
                                                },
                                                "totalDiscount": {
                                                    "type": "integer",
                                                    "description": "Total combined discount amount in cents",
                                                    "example": 1000
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "examples": {
                                    "Missing Experience ID": {
                                        "value": {
                                            "error": "MISSING_EXPERIENCE_ID",
                                            "message": "Experience ID is required."
                                        }
                                    },
                                    "Invalid Experience ID": {
                                        "value": {
                                            "error": "INVALID_EXPERIENCE_ID_UUID",
                                            "message": "Experience ID must be a valid UUID."
                                        }
                                    },
                                    "Missing Time Slot ID": {
                                        "value": {
                                            "error": "MISSING_TIME_SLOT_ID",
                                            "message": "Time slot ID is required."
                                        }
                                    },
                                    "Invalid Time Slot ID": {
                                        "value": {
                                            "error": "INVALID_TIME_SLOT_ID_UUID",
                                            "message": "Time slot ID must be a valid UUID."
                                        }
                                    },
                                    "Missing Number of Guests": {
                                        "value": {
                                            "error": "RESERVATION_NUMBER_OF_GUESTS_MISSING",
                                            "message": "Number of guests is required."
                                        }
                                    },
                                    "Invalid Number of Guests Type": {
                                        "value": {
                                            "error": "RESERVATION_NUMBER_OF_GUESTS_INVALID_TYPE",
                                            "message": "Number of guests must be a number."
                                        }
                                    },
                                    "Number of Guests Min": {
                                        "value": {
                                            "error": "RESERVATION_NUMBER_OF_GUESTS_MIN_VALUE",
                                            "message": "Number of guests must be greater than 1."
                                        }
                                    },
                                    "Number of Guests Max": {
                                        "value": {
                                            "error": "RESERVATION_NUMBER_OF_GUESTS_MAX_VALUE",
                                            "message": "Number of guests must be less than 30."
                                        }
                                    },
                                    "Experience Not Found": {
                                        "value": {
                                            "error": "EXPERIENCE_NOT_FOUND",
                                            "message": "Experience does not exist."
                                        }
                                    },
                                    "Time Slot Not Found": {
                                        "value": {
                                            "error": "TIME_SLOT_NOT_FOUND",
                                            "message": "Time slot does not exist."
                                        }
                                    },
                                    "Time Slot Not Available": {
                                        "value": {
                                            "error": "TIME_SLOT_NOT_AVAILABLE",
                                            "message": "Time slot is not available."
                                        }
                                    },
                                    "Not Enough Capacity": {
                                        "value": {
                                            "error": "TIME_SLOT_NOT_ENOUGH_CAPACITY",
                                            "message": "Not enough capacity in this time slot."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                }
            }
        }
    },
    "components": {
        "parameters": {
            "AuthorizationHeader": {
                "in": "header",
                "name": "Authorization",
                "required": true,
                "schema": {
                    "type": "string"
                },
                "description": "JWT Bearer Token",
                "example": "Bearer eyJraWQiOiJwbFhDUE9IZ3d6ZVdkYkpLZXg5Z0pcL2JabVwvb2luMndjOUQ2V3hIWlwvbGtZPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIyNDg4ODQzOC1jMDgxLTcwMWQtNGQ3Yi1hYWFjNzNhMThmODYiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfQm1kemJtYkYzIiwiY29nbml0bzp1c2VybmFtZSI6IjI0ODg4NDM4LWMwODEtNzAxZC00ZDdiLWFhYWM3M2ExOGY4NiIsIm9yaWdpbl9qdGkiOiIxM2Q4MDA0Ny05ZDcyLTQwOWUtOTA4Ny03MjViYzU1ZDhjYjciLCJhdWQiOiIydGk3NTJndWFyZTdpY2UzcWZxcThvZGg0cyIsImV2ZW50X2lkIjoiYjZlNDlkYWYtYjBmMC00NWMxLWFkNjUtMzZkYzIzYWQxZGJiIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE3NDUxNjYyMzUsImV4cCI6MTc0NTE2OTgzNSwiaWF0IjoxNzQ1MTY2MjM1LCJqdGkiOiIwZjcxNjJiNC0zYmU3LTRkODgtOTE3My00ZTdmOTdjM2FhYmMiLCJlbWFpbCI6Imh5YW4yODkzQGdtYWlsLmNvbSJ9.bmQ5KOzyUiSpPH1QrZvDtGwk8VnK3HQfbU6eaVJ1_6QOlhi4-xeRCWBCZJIfcK2F18LXhQJ17Hwx-7dnm4HnVDBVyZb80qmVXO-vGX8JauA8ulwsZhyjX09TiqBmTEhip-MqpPq6SRyR5tErpJ6dF1IFg6i18JU1mLqE2XIy3SxZc4RtK5VW7J92y-Sd_8z0qgsXdfkDOEWi96DnQcrR1YXIjWonhj0T8WkcH_p94Bfp_SUxKLhTu-PpLU8W0HLNtgMC-VwtaxcPdNaT84uE8qjho9aXxu08GNgquqElTqkZi1Ru9njCkixPpYq4tt5mud-Qr1CHu9qLx5UG2zGeVg"
            }
        },
        "schemas": {
            "Experience": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Experience unique identifier",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "hostId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Host's unique identifier",
                        "example": "123e4567-e89b-12d3-a456-426614174001"
                    },
                    "title": {
                        "type": "string",
                        "description": "Experience title",
                        "example": "Authentic Thai Cooking Class in Bangkok"
                    },
                    "tagline": {
                        "type": "string",
                        "description": "Short experience tagline",
                        "example": "Learn to cook traditional Thai dishes with a local chef"
                    },
                    "categoryId": {
                        "type": "integer",
                        "description": "Main category ID",
                        "example": 1
                    },
                    "subCategoryId": {
                        "type": "integer",
                        "description": "Sub category ID",
                        "example": 5
                    },
                    "languages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Languages spoken during the experience",
                        "example": ["English", "Thai"]
                    },
                    "experienceType": {
                        "type": "string",
                        "enum": ["indoor", "outdoor", "both"],
                        "description": "Type of experience location",
                        "example": "indoor"
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed experience description",
                        "example": "Join me for an authentic Thai cooking experience where you'll learn to prepare traditional dishes using fresh local ingredients."
                    },
                    "startingLocationAddress": {
                        "type": "string",
                        "description": "Starting location address",
                        "example": "123 Khao San Road, Bangkok, Thailand"
                    },
                    "startingLocation": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "minItems": 2,
                        "maxItems": 2,
                        "description": "Starting location coordinates [longitude, latitude]",
                        "example": [100.5018, 13.7563]
                    },
                    "endingLocationAddress": {
                        "type": "string",
                        "description": "Ending location address",
                        "example": "123 Khao San Road, Bangkok, Thailand"
                    },
                    "endingLocation": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "minItems": 2,
                        "maxItems": 2,
                        "description": "Ending location coordinates [longitude, latitude]",
                        "example": [100.5018, 13.7563]
                    },
                    "meetingLocation": {
                        "type": "object",
                        "properties": {
                            "instructions": {
                                "type": "string",
                                "description": "Meeting location instructions",
                                "example": "Meet at the front entrance of the building. Look for the red door."
                            },
                            "imageUrl": {
                                "type": "string",
                                "format": "uri",
                                "description": "Optional image URL for meeting location",
                                "example": "https://example.com/meeting-point.jpg"
                            }
                        }
                    },
                    "pricePerPerson": {
                        "type": "integer",
                        "description": "Price per person in cents",
                        "example": 2500
                    },
                    "groupDiscountsEnabled": {
                        "type": "boolean",
                        "description": "Whether group discounts are enabled",
                        "example": true
                    },
                    "discountPercentageFor3Plus": {
                        "type": "integer",
                        "description": "Discount percentage for 3+ people",
                        "example": 10
                    },
                    "discountPercentageFor5Plus": {
                        "type": "integer",
                        "description": "Discount percentage for 5+ people",
                        "example": 15
                    },
                    "earlyBirdEnabled": {
                        "type": "boolean",
                        "description": "Whether early bird discounts are enabled",
                        "example": true
                    },
                    "earlyBirdDiscountPercentage": {
                        "type": "integer",
                        "description": "Early bird discount percentage",
                        "example": 10
                    },
                    "earlyBirdDaysInAdvance": {
                        "type": "integer",
                        "description": "Days in advance for early bird rate",
                        "example": 14
                    },
                    "cancellationPolicy": {
                        "type": "string",
                        "enum": ["strict", "moderate", "flexible"],
                        "description": "Cancellation policy",
                        "example": "moderate"
                    },
                    "minGuests": {
                        "type": "integer",
                        "description": "Minimum number of guests",
                        "example": 2
                    },
                    "maxGuests": {
                        "type": "integer",
                        "description": "Maximum number of guests",
                        "example": 6
                    },
                    "autoCancelEnabled": {
                        "type": "boolean",
                        "description": "Whether to auto-cancel if minimum not met",
                        "example": false
                    },
                    "autoCancelHours": {
                        "type": "integer",
                        "description": "Hours before auto-cancel if minimum not met",
                        "example": 24
                    },
                    "coverImageUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "Cover image URL for the experience",
                        "example": "https://example.com/cover-image.jpg"
                    },
                    "galleryImageUrls": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "description": "Gallery image URLs",
                        "example": [
                            "https://example.com/gallery1.jpg",
                            "https://example.com/gallery2.jpg"
                        ]
                    },
                    "includedItems": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["food", "drinks", "transport", "equipment"]
                        },
                        "description": "Items included in the experience",
                        "example": ["food", "drinks"]
                    },
                    "whatToBring": {
                        "type": "string",
                        "description": "What participants should bring",
                        "example": "Please bring comfortable clothes and closed-toe shoes."
                    },
                    "physicalRequirements": {
                        "type": "string",
                        "enum": ["low", "medium", "high"],
                        "description": "Physical requirement level",
                        "example": "low"
                    },
                    "ageRange": {
                        "type": "string",
                        "enum": [
                            "18-25",
                            "26-35",
                            "36-45",
                            "46-55",
                            "56-65",
                            "66+"
                        ],
                        "description": "Recommended age group",
                        "example": "18-25"
                    },
                    "accessibilityInfo": {
                        "type": "string",
                        "description": "Accessibility information",
                        "example": "The venue is wheelchair accessible with ramps and accessible restrooms."
                    },
                    "durationHours": {
                        "type": "integer",
                        "description": "Duration in hours",
                        "example": 3
                    },
                    "timezone": {
                        "type": "string",
                        "description": "IANA timezone identifier",
                        "example": "Asia/Bangkok"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["draft", "published", "archived"],
                        "description": "Experience status",
                        "example": "published"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Whether the experience is public",
                        "example": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the experience was created",
                        "example": "2024-01-01T00:00:00Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the experience was last updated",
                        "example": "2024-01-01T00:00:00Z"
                    }
                }
            }
        },
        "responses": {
            "Unauthorized": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        },
                        "examples": {
                            "Unauthorized": {
                                "value": {
                                    "message": "Unauthorized"
                                }
                            }
                        }
                    }
                }
            },
            "InternalServerError": {
                "description": "Internal server error",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "example": "Internal server error"
                                },
                                "message": {
                                    "type": "string",
                                    "example": "An unexpected error occurred."
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
