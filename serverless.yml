service: ohana
licenseKey: ${env:SERVERLESS_ACCESS_KEY}
frameworkVersion: "4"
useDotenv: true

provider:
    name: aws
    profile: ohana-deployer
    stage: ${opt:stage, 'dev'}
    versionFunctions: false
    runtime: nodejs20.x
    region: us-east-1
    environment:
        SERVICE: ${self:service}
        NODE_ENV: ${opt:stage, 'dev'}
        ASSETS_CDN_DOMAIN: !GetAtt AssetsCloudFrontDistribution.DomainName
        AWS_ACCOUNT_ID: !Ref AWS::AccountId
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - s3:*
                  Resource: "*"

                - Effect: Allow
                  Action:
                      - lambda:InvokeFunction
                  Resource: "*"

                - Effect: Allow
                  Action:
                      - lambda:RemovePermission
                  Resource: "*"

                - Effect: Allow
                  Action:
                      - lambda:InvokeFunctionUrl
                  Resource: "*"

                - Effect: Allow
                  Action:
                      - dynamodb:*
                  Resource: "*"

                - Effect: Allow
                  Action:
                      - cognito-idp:*
                  Resource: "*"

                - Effect: Allow
                  Action:
                      - secretsmanager:*
                  Resource: "*"

                - Effect: Allow
                  Action:
                      - rds-data:*
                  Resource: "*"

                - Effect: Allow
                  Action:
                      - rds-db:connect
                  Resource: "*"

package:
    individually: true

plugins:
    # - serverless-offline
    - serverless-finch
    - serverless-plugin-scripts

custom:
    # serverless-offline:
    #     httpPort: 3000
    #     lambdaPort: 3002
    #     noPrependStageInUrl: true
    #     lambdaUrls: true
    client:
        bucketName: ohana-docs
        distributionFolder: docs/dist

    scripts:
        hooks:
            after:deploy:deploy: serverless invoke -f runMigrations --stage ${self:provider.stage}

    resourceNames:
        userPool: ${self:service}-user-pool-${self:provider.stage}
        userPoolClient: ${self:service}-user-pool-client-${self:provider.stage}
        userPoolDomain: ${self:service}-${self:provider.stage}
        pinpoint: ${self:service}-pinpoint-${self:provider.stage}
        identityPool: ${self:service}-identity-pool-${self:provider.stage}
        postgresDB: ${self:service}_postgres_${self:provider.stage}
        secretsManager: ${self:service}-secrets-manager-${self:provider.stage}
        cognitoSnsRole: ${self:service}-cognito-sns-role-${self:provider.stage}
        assetsBucket: ${self:service}-assets-bucket-${self:provider.stage}

    # RDS Proxy configuration - only enabled for production
    useRdsProxy:
        production: true
        staging: false
        dev: false

functions:
    - ${file(functions/auth.yml)}
    - ${file(functions/database.yml)}
    - ${file(functions/user.yml)}
    - ${file(functions/stripe.yml)}
    - ${file(functions/host.yml)}
    - ${file(functions/webhooks.yml)}
    - ${file(functions/experiences.yml)}
    - ${file(functions/time_slots.yml)}
    - ${file(functions/reservations.yml)}
    - ${file(functions/categories.yml)}
    - ${file(functions/admin.yml)}
    - ${file(functions/triggers.yml)}
    - ${file(functions/reviews.yml)}

resources:
    - ${file(resources/storage.yml)}
    - ${file(resources/auth.yml)}
    - ${file(resources/database.yml)}
    - ${file(resources/vpc.yml)}
    - ${file(resources/rds-proxy-${self:provider.stage}.yml)}
    - ${file(resources/gateway.yml)}
